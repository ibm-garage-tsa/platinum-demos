{"componentChunkName":"component---src-pages-300-watson-aiops-application-resource-management-demo-script-dec-13-mdx","path":"/300-watson-aiops-application-resource-management/demo-script-dec13/","result":{"pageContext":{"frontmatter":{"title":"Assuring application performance on private clouds 300-level live demo","description":"Assuring application performance on private clouds 300-level live demo","tabs":["Demo preparation","Demo script"]},"relativePagePath":"/300-watson-aiops-application-resource-management/demo-script-dec13.mdx","titleType":"page","MdxNode":{"id":"b1615afe-6187-5256-8e42-0fa0f9ea9538","children":[],"parent":"ce93acb6-97cf-5472-921c-5c151a0df4c4","internal":{"content":"---\ntitle:   Assuring application performance on private clouds\n  300-level live demo\ndescription:   Assuring application performance on private clouds 300-level live demo\ntabs: [ 'Demo preparation', 'Demo script']\n---\n\nexport const Title = () => (\n  <span>\n    Assuring application performance on private clouds<br/> 300-level live demo\n  </span> );\n\n![banner](./images/Incident-Resolution-300-Script.jpg)\n\n<span id=\"top\"></span>\n\n<details>\n<summary>Introduction</summary>\n<br/>\n\nIn this demo, I'll show you how IBM Turbonomic helps SREs and IT Ops teams proactively assure application performance and drive operational efficiency across their mission critical deployments.\n\n<br/>\n\nHome Robots Inc is fully digital global consumer electronic company that sells a growing array of innovative robots that assist with mundane household chores. RobotShop is the primary market place where clients browse and make online purchases. RobotShop is a microservices-based cloud native app. The spot promotions and other marketing events around the globe result in varying and unpredictable load patterns. The site has suffered from customer experience issues due to application performance that was caused by underlying resource issues. The IT Ops teams lack the full stack visibility and tend to either over or under provision based on best-guesses - this is highly inefficient, very costly and risky.<br/><br/>\n\nIn this demo we will show you how Turbonomic, a solution based on Application Resource Management can help Home Robots Inc. We will:\n\n<br/>\n• See how Turbonomic stitches together a full-stack view from business applications to the platform all the way to the underlying physical infrastructure <br/>\n• Examine the resource optimization recommendations generated by the AI-based platform analytics <br/>\n• Demonstrate how the execution of platform-derived 'Actions' can be automated <br/>\n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>1 - Getting a global view of the applications and their infrastructure dependencies</summary>\n\n<br/>\n\n| **1.1** | **Ingest data from other sources** |\n| :--- | :--- |\n| **Narration** | Turbonomic requires configuration and operational performance data to make recommendations. The more data the better.<br/><br/>RobotShop is being observed by Instana. Turbonomic in turn has tight integrations with Instana and other monitoring tools and therefore has access to this performance data.<br/><br/>Turbonomic ingests, normalizes and builds a common data model to \"stitch\" together a graphical view of the application-to-resource dependencies. This is called the 'Supply Chain'. |\n| **Action** &nbsp; 1.1.1 | Click **Settings** (1), select **Target Configurations** (2), and select the **avar.coc-ibm.com** Instana option (3). <br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/target-configurations.jpg\" width=\"500\" /> |\n\n| **1.2** | **Examine the global supply chain** |\n| :--- | :--- |\n| **Narration** | We are responsible for RobotShop - but before we dive into RobotShop it is important to take a step back and understand the global picture: what others apps are consuming shared resources here, what platforms are applications deployed to and what are the underlying infrastructure components involved.<br/><br/>The global supply chain provides the visualization and serves as a graphical organizer of the various entities in the IT stack and models the dynamic relationships all the way from the managed application, across the underlying related infrastructure layers from the private cloud all the way out to the public cloud. |\n| **Action** &nbsp; 1.2.1 | Log in to the Turbonomic instance, ensuring that you are on the **Application** tab of the **Turbonomic Home Page**. Click on the **Turbonomic Home** button. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Global-Supply-Chain.jpg\" width=\"800\" /> |\n| **Narration** | RobotShop is a modern containerized application. It is deployed to a highly virtualized on-prem environment based on Red Hat OpenShift. <br/><br/>RobotShop shares cluster resources with other applications. Hence the performance of RobotShop is directly impacted by competing apps and shared infrastructure. <br/><br/>Starting at the top you have all the Business Applications that Turbonomic is aware of in this deployment environment. Business Applications are composed of Business Transactions - which are logical business function that an end-user would execute. A purchase or add-to-cart is an example of a business transaction. Transactions in turn use Services - where a service is basically a REST endpoint.<br/><br/>Going down the supply chain you see the components that build up the lower layers of the application stack - ranging from Kubernetes and vSphere virtualization controllers to database servers, storage volumes, hosts and all the way out to availability zones on the public cloud. <br/><br/>Each circle represents an IT entity, the color reflects the current health of the entities: red points to a critical risk, yellow is an area to improve efficiency, and green is healthy. <br/><br/>You can set a time frame from recent hours to the past year. This flexibility to visualize resource relationships at varying points in time is also very valuable. <br/><br/> Let's see what are the Top Business Applications at risk - that need immediate attention. The list is ordered in terms of severity.<br/><br/>We can observe that RobotShop currently has SLO violations - where response time is up and throughput is below expected service levels.<br/><br/>The Application Resource Health bar indicates that there are some critical performance issues (in red) as well as some area to improve efficiency (in yellow).<br/><br/>The Actions button will take you to the Actions panel enabling you to take the recommended actions directly from Turbonomic. |\n| **Action** &nbsp; 1.2.2 | Hover your mouse over the **Business Applications** entity and **Click Business Applications** entity. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/robotshop-SLO-violation.png\" width=\"800\" /> |\n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>2 - Drilling into the RobotShop application</summary>\n\n<br/>\n\n| **2.1** | **Examine the RobotShop specific resource dependencies** |\n| :--- | :--- |\n| **Narration** | Now that we have a broad understanding of the Global view, let's examine the health of our app RobotShop. This is called 'scoping'. <br/><br/>The supply chain views, whether global or scoped to a specific app (like RobotShop in our case), serve as a single source of information and help bridge the communication gap that often exists between the application owners and infrastructure teams. |\n| **Action** &nbsp; 2.1.1 | Click the **RobotShop** link to scope to RobotShop. <br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RobotShop-Supply-Chain.jpg\" width=\"800\" /> |\n| **Narration** | The supply chain is scoped to RobotShop. The charts provide a quick view of the overall operating health of RobotShop.<br/><br/>Turbonomic builds its application-awareness from tools like Instana and discovers Kubernetes pods via a set of deployed probes. Notice that, since RobotShop is a Kubernetes-based cloud native application, all the entities appearing in the supply chain are specific to a container platform infrastructure. The container platform in this case is RHOCP and runs on a VMWare cluster on-prem. Hence, there are no public cloud entities in the RobotShop supply chain. |\n| **Action** &nbsp; 2.1.2 | In the **Pending Actions** chart, click on **Show All**. On the **Action Center** panel, select **Workload Controller**. Click **Details**. <br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RobotShop-Performance-Action-click-DETAILS.jpg\" width=\"800\" /> |\n| **Narration** | The Turbonomic engine performs an ongoing holistic analysis of the environment. Based on the analysis, Turbonomic generates actions that you can take to resolve and avoid emerging problems. The actions are scoped to the containers that are part of the  RobotShop deployment. <br/><br/>Here we can see container resize actions, categorized as Performance and Efficiency actions and displayed for you to investigate further or execute directly. Container Resize UP actions are typically performance-centric actions that are driven to resolve an underlying resource congestion issue.<br/><br/>Container Resize DOWN actions are typically efficiency-centric actions that are pointing to a resource optimization opportunity likely a consequence of resource over-provisioning. |\n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>3 - Understanding the AI-derived resource optimization Recommendations </summary>\n\n<br/>\n\n| **3.1** | **Analyze a RobotShop performance recommendation** |\n| :--- | :--- |\n| **Narration** | Let's explore one of the generated RobotShop performance actions recommendations. |\n| **Action** &nbsp; 3.1.1 | On the **Action Details** page, click **Expand Details** to inspect the rationale behind the recommendations.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Expand-Action-Details.jpg\" width=\"800\" /> |\n| **Narration** | The graphs show imminent congestion of virtual memory for the RobotShop card pod. This is based on the a percentile analysis from the last 30 days observation period. A recommendation is made: upsize the existing memory from 100 MB to 228 MB. The analysis also shows that if this action is take it will result in a reduction of memory utilization from 82% to 36%. This memory upsizing will mitigate the detected risk of contention for memory resources. |\n\n| **3.2** | **Analyze a RobotShop efficiency recommendation** |\n| :--- | :--- |\n| **Narration** | When the architect initially does sizing, the values are based on best-guesses and taking a safer path typically resulting in over-provisioning of resources. Therefore there is often opportunity to reclaim unused expensive resources and save costs. |\n| **Action** &nbsp; 3.2.1 | On the **Action Center** panel, select **rabbitmq**. Click **Details**.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/rabbitmq-overprovisioning-1.jpg\" width=\"800\" /> <br/><img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/rabbitmq-overprovisioning-2.jpg\" width=\"800\" /> |\n| **Narration** | Based on resource analysis of the RobotShop rabbitmq service we can see that memory is over-provisioned and can be reduced. An Efficiency recommendation is being made to reduce the memory of the pod from 512 MB to 384 MB. The downsizing will improve memory utilization without impacting overall service performance.<br/><br/>CPU on the other hand is potentially risky at 90% utilization level. The CPU congestion can result in a performance degradation of this service.  A recommendation is also being made to double the CPU capacity of the RobotShop rabbitmq container. |\n\n| **3.3** | **Analyze an efficiency action** |\n| :--- | :--- |\n| **Narration** | The performance of service depends on the availability of compute resources to the encapsulating pod. The pod runs on a node - hence the performance and efficiency of the node matters. We will see how Turbonomic is able to intelligently and proactively redistribute workloads in real-time to better optimize the full stack. |\n| **Action** &nbsp; 3.3.1 | On the **RobotShop** Supply chain, hover over the **Namespace** entity. Inspect the popup to get a quick view of the risks, then click **Namespace**.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RobotShop-Namespace.jpg\" width=\"500\" />\n| **Narration** | A Namespace is a logical pool of resources in a Kubernetes environment that manages workloads based on specific requirements or business needs.  The Capacity and Usage chart provides a quick view into quotas set on this cluster and the relative utilization of the resources. These quotas serve as the guardrails when making container sizing decisions. In the Top Services chart it shows that the RobotShop rabbitmq service can benefit from some performance and efficiency actions. |\n| **Action** &nbsp; 3.3.2 | On the **Service-robot-shop/rabbitmq** row, click on **Actions**.<br/><br/>  <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RabbitMQ-Actions-Click.jpg\" width=\"800\" /> |\n| **Action** &nbsp; 3.3.3 | On the **Action Center** panel, under **Move**, select **Container Pods**, then **robotshop/rabbitmq** under **Move Actions**. Click **Details**.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/rabbitmq-Action-Details-1.jpg\" width=\"800\" /> |\n| **Narration** | The RobotShop rabbitmq service is a queueing service hosting the RabbitMQ server. Turbonomic analysis indicates that the worker node currently hosting the rabbitmq service is under-utilized and operational efficiency can be further improved by moving this service to another worker node and in that process consolidating the cluster resources on fewer worker nodes. The analytics also computes the approximate future resource utilization rates of the source and target worker nodes if the actions were to be taken. In the absence of these capabilities the alternate manual approach can be slow, reactive, error-prone and increasingly challenging as the number of services on the cluster grow.<br/><br/>Last but not least, the analytics also inform the user whether these resource optimization actions can be taken right from within Turbonomic. Let's look at that next. |\n \n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>4 - Taking action and putting your application resource management into autoPilot </summary>\n\n<br/>\n\n| **4.1** | **Take action** |\n| :--- | :--- |\n| **Narration** | A key part of the Application Resource Management process is to generate a set of actions that the user can take to proactively avoid a potential performance issue. All actions generated appear as pending and can be viewed in the Pending Actions chart, as we've seen above. We can then determine whether to execute them manually right from within Turbonomic or automate the action execution and remove or minimize the human intervention. Let's look at the manual execution process first. |\n| **Action** &nbsp; 4.1.1 | In the **Action Center** panel, under **Move**, select the **robot-shop/rabbitmq** action. Click **Execute Action**.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Take-Action-Manually.jpg\" width=\"800\" /> |\n| **Narration** | Now let's manually execute the recommended resource Efficiency action on the robot-shop/rabbitmq service. Turbonomic allows you to execute the recommended action right from within the platform - this is very convenient and enhances productivity as no tool hopping is necessary and all the audit trails of what actions were executed, by whom and when are easily available for compliance purposes if necessary. |\n\n| **4.2** | **Automating Action Execution - Towards Eliminating Manual Intervention** |\n| :--- | :--- |\n| **Narration** | RobotShop is composed of a dozen or so microservices. Given the fluctuating demand patterns and the availability of compute resources resource optimization actions will be continuously generated by the platform - with the sole goal of keeping RobotShop in the 'desired state'. <br/><br/>We will now briefly walk through how we can define automation policies to automate this action execution. |\n| **Action** &nbsp; 4.2.1 | From **Settings**, click  **Policies**, then click **New Automation Policy** and select **Container Pod**.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Automation-Policy-1.jpg\" width=\"500\" /> |\n| **Narration** | The process defining an automation policy is the same across the various entity types, but the Action Types vary as they are entity specific. |\n| **Action** &nbsp; 4.2.2 | Fill out the **Action and Orchestration Panel** as shown below.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Automation-Policy-2.jpg\" width=\"500\" /> |\n| **Narration** | ARE MEANT TO BE ACTIONS? Define the Action Types that will be automated by this automation policy - Move, Suspend, Provision<br/><br/>Set Action Generation --> Generate Actions<br/><br/>Set Action Acceptance --> Automatic<br/><br/>DO NOT click SUBMIT |\n| **Narration** | Once the Automation Policy is saved it will go into effect, all Actions generated such as Move - Suspend - Provision, will then be automatically executed.<br/><br/>The main benefit and best-practice of Turbonomic, is to have an increasing number of actions be executed automatically. This will remove human intervention and leverage automation to maintain application performance and improve operational efficiency. |\n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>Summary</summary>\n\n<br/>\n\nIn this demo we used RobotShop, a cloud-native application to demonstrate how Turbonomic, leverages the principles of Application Resource Management to:<br/><br/>\n\n- Provide full stack visibility and control into your diverse deployment environments<br/>\n- Conduct continuous application-aware resource optimization, balancing demand and supply in realtime<br/>\n- Enable the Automated Execution of the AI-derived and platform-generated actions \n\n<br/>\n\nUsing RobotShop, we walked through examples of container right sizing, over-provisioning and workload consolidation and how Turbonomic can  analyze-detect-act to assure the performance of your applications and to improve the operational efficiency of the supporting application infrastructure. \n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n","type":"Mdx","contentDigest":"178f7c60d5596c8f6ef6ba672ff823e6","owner":"gatsby-plugin-mdx","counter":2272},"frontmatter":{"title":"Assuring application performance on private clouds 300-level live demo","description":"Assuring application performance on private clouds 300-level live demo","tabs":["Demo preparation","Demo script"]},"exports":{},"rawBody":"---\ntitle:   Assuring application performance on private clouds\n  300-level live demo\ndescription:   Assuring application performance on private clouds 300-level live demo\ntabs: [ 'Demo preparation', 'Demo script']\n---\n\nexport const Title = () => (\n  <span>\n    Assuring application performance on private clouds<br/> 300-level live demo\n  </span> );\n\n![banner](./images/Incident-Resolution-300-Script.jpg)\n\n<span id=\"top\"></span>\n\n<details>\n<summary>Introduction</summary>\n<br/>\n\nIn this demo, I'll show you how IBM Turbonomic helps SREs and IT Ops teams proactively assure application performance and drive operational efficiency across their mission critical deployments.\n\n<br/>\n\nHome Robots Inc is fully digital global consumer electronic company that sells a growing array of innovative robots that assist with mundane household chores. RobotShop is the primary market place where clients browse and make online purchases. RobotShop is a microservices-based cloud native app. The spot promotions and other marketing events around the globe result in varying and unpredictable load patterns. The site has suffered from customer experience issues due to application performance that was caused by underlying resource issues. The IT Ops teams lack the full stack visibility and tend to either over or under provision based on best-guesses - this is highly inefficient, very costly and risky.<br/><br/>\n\nIn this demo we will show you how Turbonomic, a solution based on Application Resource Management can help Home Robots Inc. We will:\n\n<br/>\n• See how Turbonomic stitches together a full-stack view from business applications to the platform all the way to the underlying physical infrastructure <br/>\n• Examine the resource optimization recommendations generated by the AI-based platform analytics <br/>\n• Demonstrate how the execution of platform-derived 'Actions' can be automated <br/>\n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>1 - Getting a global view of the applications and their infrastructure dependencies</summary>\n\n<br/>\n\n| **1.1** | **Ingest data from other sources** |\n| :--- | :--- |\n| **Narration** | Turbonomic requires configuration and operational performance data to make recommendations. The more data the better.<br/><br/>RobotShop is being observed by Instana. Turbonomic in turn has tight integrations with Instana and other monitoring tools and therefore has access to this performance data.<br/><br/>Turbonomic ingests, normalizes and builds a common data model to \"stitch\" together a graphical view of the application-to-resource dependencies. This is called the 'Supply Chain'. |\n| **Action** &nbsp; 1.1.1 | Click **Settings** (1), select **Target Configurations** (2), and select the **avar.coc-ibm.com** Instana option (3). <br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/target-configurations.jpg\" width=\"500\" /> |\n\n| **1.2** | **Examine the global supply chain** |\n| :--- | :--- |\n| **Narration** | We are responsible for RobotShop - but before we dive into RobotShop it is important to take a step back and understand the global picture: what others apps are consuming shared resources here, what platforms are applications deployed to and what are the underlying infrastructure components involved.<br/><br/>The global supply chain provides the visualization and serves as a graphical organizer of the various entities in the IT stack and models the dynamic relationships all the way from the managed application, across the underlying related infrastructure layers from the private cloud all the way out to the public cloud. |\n| **Action** &nbsp; 1.2.1 | Log in to the Turbonomic instance, ensuring that you are on the **Application** tab of the **Turbonomic Home Page**. Click on the **Turbonomic Home** button. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Global-Supply-Chain.jpg\" width=\"800\" /> |\n| **Narration** | RobotShop is a modern containerized application. It is deployed to a highly virtualized on-prem environment based on Red Hat OpenShift. <br/><br/>RobotShop shares cluster resources with other applications. Hence the performance of RobotShop is directly impacted by competing apps and shared infrastructure. <br/><br/>Starting at the top you have all the Business Applications that Turbonomic is aware of in this deployment environment. Business Applications are composed of Business Transactions - which are logical business function that an end-user would execute. A purchase or add-to-cart is an example of a business transaction. Transactions in turn use Services - where a service is basically a REST endpoint.<br/><br/>Going down the supply chain you see the components that build up the lower layers of the application stack - ranging from Kubernetes and vSphere virtualization controllers to database servers, storage volumes, hosts and all the way out to availability zones on the public cloud. <br/><br/>Each circle represents an IT entity, the color reflects the current health of the entities: red points to a critical risk, yellow is an area to improve efficiency, and green is healthy. <br/><br/>You can set a time frame from recent hours to the past year. This flexibility to visualize resource relationships at varying points in time is also very valuable. <br/><br/> Let's see what are the Top Business Applications at risk - that need immediate attention. The list is ordered in terms of severity.<br/><br/>We can observe that RobotShop currently has SLO violations - where response time is up and throughput is below expected service levels.<br/><br/>The Application Resource Health bar indicates that there are some critical performance issues (in red) as well as some area to improve efficiency (in yellow).<br/><br/>The Actions button will take you to the Actions panel enabling you to take the recommended actions directly from Turbonomic. |\n| **Action** &nbsp; 1.2.2 | Hover your mouse over the **Business Applications** entity and **Click Business Applications** entity. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/robotshop-SLO-violation.png\" width=\"800\" /> |\n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>2 - Drilling into the RobotShop application</summary>\n\n<br/>\n\n| **2.1** | **Examine the RobotShop specific resource dependencies** |\n| :--- | :--- |\n| **Narration** | Now that we have a broad understanding of the Global view, let's examine the health of our app RobotShop. This is called 'scoping'. <br/><br/>The supply chain views, whether global or scoped to a specific app (like RobotShop in our case), serve as a single source of information and help bridge the communication gap that often exists between the application owners and infrastructure teams. |\n| **Action** &nbsp; 2.1.1 | Click the **RobotShop** link to scope to RobotShop. <br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RobotShop-Supply-Chain.jpg\" width=\"800\" /> |\n| **Narration** | The supply chain is scoped to RobotShop. The charts provide a quick view of the overall operating health of RobotShop.<br/><br/>Turbonomic builds its application-awareness from tools like Instana and discovers Kubernetes pods via a set of deployed probes. Notice that, since RobotShop is a Kubernetes-based cloud native application, all the entities appearing in the supply chain are specific to a container platform infrastructure. The container platform in this case is RHOCP and runs on a VMWare cluster on-prem. Hence, there are no public cloud entities in the RobotShop supply chain. |\n| **Action** &nbsp; 2.1.2 | In the **Pending Actions** chart, click on **Show All**. On the **Action Center** panel, select **Workload Controller**. Click **Details**. <br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RobotShop-Performance-Action-click-DETAILS.jpg\" width=\"800\" /> |\n| **Narration** | The Turbonomic engine performs an ongoing holistic analysis of the environment. Based on the analysis, Turbonomic generates actions that you can take to resolve and avoid emerging problems. The actions are scoped to the containers that are part of the  RobotShop deployment. <br/><br/>Here we can see container resize actions, categorized as Performance and Efficiency actions and displayed for you to investigate further or execute directly. Container Resize UP actions are typically performance-centric actions that are driven to resolve an underlying resource congestion issue.<br/><br/>Container Resize DOWN actions are typically efficiency-centric actions that are pointing to a resource optimization opportunity likely a consequence of resource over-provisioning. |\n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>3 - Understanding the AI-derived resource optimization Recommendations </summary>\n\n<br/>\n\n| **3.1** | **Analyze a RobotShop performance recommendation** |\n| :--- | :--- |\n| **Narration** | Let's explore one of the generated RobotShop performance actions recommendations. |\n| **Action** &nbsp; 3.1.1 | On the **Action Details** page, click **Expand Details** to inspect the rationale behind the recommendations.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Expand-Action-Details.jpg\" width=\"800\" /> |\n| **Narration** | The graphs show imminent congestion of virtual memory for the RobotShop card pod. This is based on the a percentile analysis from the last 30 days observation period. A recommendation is made: upsize the existing memory from 100 MB to 228 MB. The analysis also shows that if this action is take it will result in a reduction of memory utilization from 82% to 36%. This memory upsizing will mitigate the detected risk of contention for memory resources. |\n\n| **3.2** | **Analyze a RobotShop efficiency recommendation** |\n| :--- | :--- |\n| **Narration** | When the architect initially does sizing, the values are based on best-guesses and taking a safer path typically resulting in over-provisioning of resources. Therefore there is often opportunity to reclaim unused expensive resources and save costs. |\n| **Action** &nbsp; 3.2.1 | On the **Action Center** panel, select **rabbitmq**. Click **Details**.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/rabbitmq-overprovisioning-1.jpg\" width=\"800\" /> <br/><img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/rabbitmq-overprovisioning-2.jpg\" width=\"800\" /> |\n| **Narration** | Based on resource analysis of the RobotShop rabbitmq service we can see that memory is over-provisioned and can be reduced. An Efficiency recommendation is being made to reduce the memory of the pod from 512 MB to 384 MB. The downsizing will improve memory utilization without impacting overall service performance.<br/><br/>CPU on the other hand is potentially risky at 90% utilization level. The CPU congestion can result in a performance degradation of this service.  A recommendation is also being made to double the CPU capacity of the RobotShop rabbitmq container. |\n\n| **3.3** | **Analyze an efficiency action** |\n| :--- | :--- |\n| **Narration** | The performance of service depends on the availability of compute resources to the encapsulating pod. The pod runs on a node - hence the performance and efficiency of the node matters. We will see how Turbonomic is able to intelligently and proactively redistribute workloads in real-time to better optimize the full stack. |\n| **Action** &nbsp; 3.3.1 | On the **RobotShop** Supply chain, hover over the **Namespace** entity. Inspect the popup to get a quick view of the risks, then click **Namespace**.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RobotShop-Namespace.jpg\" width=\"500\" />\n| **Narration** | A Namespace is a logical pool of resources in a Kubernetes environment that manages workloads based on specific requirements or business needs.  The Capacity and Usage chart provides a quick view into quotas set on this cluster and the relative utilization of the resources. These quotas serve as the guardrails when making container sizing decisions. In the Top Services chart it shows that the RobotShop rabbitmq service can benefit from some performance and efficiency actions. |\n| **Action** &nbsp; 3.3.2 | On the **Service-robot-shop/rabbitmq** row, click on **Actions**.<br/><br/>  <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RabbitMQ-Actions-Click.jpg\" width=\"800\" /> |\n| **Action** &nbsp; 3.3.3 | On the **Action Center** panel, under **Move**, select **Container Pods**, then **robotshop/rabbitmq** under **Move Actions**. Click **Details**.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/rabbitmq-Action-Details-1.jpg\" width=\"800\" /> |\n| **Narration** | The RobotShop rabbitmq service is a queueing service hosting the RabbitMQ server. Turbonomic analysis indicates that the worker node currently hosting the rabbitmq service is under-utilized and operational efficiency can be further improved by moving this service to another worker node and in that process consolidating the cluster resources on fewer worker nodes. The analytics also computes the approximate future resource utilization rates of the source and target worker nodes if the actions were to be taken. In the absence of these capabilities the alternate manual approach can be slow, reactive, error-prone and increasingly challenging as the number of services on the cluster grow.<br/><br/>Last but not least, the analytics also inform the user whether these resource optimization actions can be taken right from within Turbonomic. Let's look at that next. |\n \n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>4 - Taking action and putting your application resource management into autoPilot </summary>\n\n<br/>\n\n| **4.1** | **Take action** |\n| :--- | :--- |\n| **Narration** | A key part of the Application Resource Management process is to generate a set of actions that the user can take to proactively avoid a potential performance issue. All actions generated appear as pending and can be viewed in the Pending Actions chart, as we've seen above. We can then determine whether to execute them manually right from within Turbonomic or automate the action execution and remove or minimize the human intervention. Let's look at the manual execution process first. |\n| **Action** &nbsp; 4.1.1 | In the **Action Center** panel, under **Move**, select the **robot-shop/rabbitmq** action. Click **Execute Action**.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Take-Action-Manually.jpg\" width=\"800\" /> |\n| **Narration** | Now let's manually execute the recommended resource Efficiency action on the robot-shop/rabbitmq service. Turbonomic allows you to execute the recommended action right from within the platform - this is very convenient and enhances productivity as no tool hopping is necessary and all the audit trails of what actions were executed, by whom and when are easily available for compliance purposes if necessary. |\n\n| **4.2** | **Automating Action Execution - Towards Eliminating Manual Intervention** |\n| :--- | :--- |\n| **Narration** | RobotShop is composed of a dozen or so microservices. Given the fluctuating demand patterns and the availability of compute resources resource optimization actions will be continuously generated by the platform - with the sole goal of keeping RobotShop in the 'desired state'. <br/><br/>We will now briefly walk through how we can define automation policies to automate this action execution. |\n| **Action** &nbsp; 4.2.1 | From **Settings**, click  **Policies**, then click **New Automation Policy** and select **Container Pod**.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Automation-Policy-1.jpg\" width=\"500\" /> |\n| **Narration** | The process defining an automation policy is the same across the various entity types, but the Action Types vary as they are entity specific. |\n| **Action** &nbsp; 4.2.2 | Fill out the **Action and Orchestration Panel** as shown below.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Automation-Policy-2.jpg\" width=\"500\" /> |\n| **Narration** | ARE MEANT TO BE ACTIONS? Define the Action Types that will be automated by this automation policy - Move, Suspend, Provision<br/><br/>Set Action Generation --> Generate Actions<br/><br/>Set Action Acceptance --> Automatic<br/><br/>DO NOT click SUBMIT |\n| **Narration** | Once the Automation Policy is saved it will go into effect, all Actions generated such as Move - Suspend - Provision, will then be automatically executed.<br/><br/>The main benefit and best-practice of Turbonomic, is to have an increasing number of actions be executed automatically. This will remove human intervention and leverage automation to maintain application performance and improve operational efficiency. |\n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>Summary</summary>\n\n<br/>\n\nIn this demo we used RobotShop, a cloud-native application to demonstrate how Turbonomic, leverages the principles of Application Resource Management to:<br/><br/>\n\n- Provide full stack visibility and control into your diverse deployment environments<br/>\n- Conduct continuous application-aware resource optimization, balancing demand and supply in realtime<br/>\n- Enable the Automated Execution of the AI-derived and platform-generated actions \n\n<br/>\n\nUsing RobotShop, we walked through examples of container right sizing, over-provisioning and workload consolidation and how Turbonomic can  analyze-detect-act to assure the performance of your applications and to improve the operational efficiency of the supporting application infrastructure. \n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n","fileAbsolutePath":"/home/runner/work/platinum-demos/platinum-demos/src/pages/300-watson-aiops-application-resource-management/demo-script-dec13.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}