{"componentChunkName":"component---src-pages-300-watson-aiops-application-resource-management-demo-script-mdx","path":"/300-watson-aiops-application-resource-management/demo-script/","result":{"pageContext":{"frontmatter":{"title":"Application resource management 300-level live demo","description":"Application resource management 300-level live demo","tabs":["Demo preparation","Demo script"]},"relativePagePath":"/300-watson-aiops-application-resource-management/demo-script.mdx","titleType":"page","MdxNode":{"id":"932a8fc3-ea5a-59d3-844e-d4929e1f0323","children":[],"parent":"1c71a47d-44cc-5a03-8853-159eaf83b588","internal":{"content":"---\ntitle: Application resource management\n  300-level live demo\ndescription: Application resource management 300-level live demo\ntabs: [ 'Demo preparation', 'Demo script']\n---\n\nexport const Title = () => (\n  <span>\n    Application resource management<br/> 300-level live demo\n  </span> );\n\n![banner](./images/ARM-GitHub-script-banner-12-15-21.jpg)\n\n<span id=\"top\"></span>\n\n<details>\n<summary>Introduction</summary>\n<br/>\n\nIn this growing digital economy, the application is the business. Application performance, therefore, is one of highest CIO priorities.\n\n<br/>\n\nHome Robots Inc is a fully digital company selling innovative \"household chores\" robots globally via its RobotShop online marketplace. Clients browse and purchase through this microservices-based cloud native app. Spot promotions and other marketing events, however, generate unpredictable load patterns. The IT Ops teams, lacking full stack visibility, tend to either over or under provision resources based on best-guesses - which is highly inefficient, very costly and risky. The result? Poor application performance and bad customer experiences. \n\n<br/>\n\nMost application performance issues are similarly caused by a lack of computing resources. In this demo, I'll show you how IBM Turbonomic, a solution based on Application Resource Management, helps RobotShop's SREs and IT Ops teams proactively assure application performance and operational efficiency across their mission critical deployments.  We will:\n\n<br/>\n• See how Turbonomic stitches together a full-stack view from business applications, to the platform, all the way to the underlying physical infrastructure <br/>\n• Examine the resource optimization recommendations generated by AI-based platform analytics <br/>\n• Demonstrate how to automate execution of platform-derived 'Actions' <br/>\n\n<br/>\n\nLet's get started!\n\n<br/>\n\n**Note**: The scope of this demo will be restricted to application resource management of resources in private clouds. A different demo will illustrate application resource management as it pertains to public clouds. \n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>1 - Getting a global view of the applications and their infrastructure dependencies</summary>\n\n<br/>\n\n| **1.1** | **Ingesting data from observability platforms and other sources** |\n| :--- | :--- |\n| **Narration** | Turbonomic requires configuration and operational performance data to make resource optimization recommendations. The more data the better.<br/><br/>RobotShop is being observed by Instana. Turbonomic ingests data from APM tools and other sources and builds a common data model to 'stitch' together a graphical view of the application-to-resource dependencies. This is called the 'Supply Chain'. |\n| **Action** &nbsp; 1.1.1 | Click **Settings** (1) and select **Target Configurations** (2). Select **Instana** (3). <br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/target-configurations.jpg\" width=\"500\" /> |\n\n| **1.2** | **Examine the global supply chain** |\n| :--- | :--- |\n| **Narration** | The global supply chain graphically organizes the various entities in the IT stack. It models the dynamic relationships from the managed application, across the underlying related infrastructure layers from the on-prem data center, all the way out to the cloud.<br/><br/> Let's look at the various elements of the Turbonomic instance. Each circle represents an IT entity, and the color reflects the current health of the entities: red points to a critical risk, yellow points to areas to improve efficiency, and green is healthy. |\n| **Action** &nbsp; 1.2.1 | Log in to the Turbonomic instance and click the home **On** button. <br/><br/><img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/global-supply-chain-5.jpg\" width=\"800\" /> |\n| **Action** &nbsp; 1.2.2 | Hover over the **Business Application** entity (1), which shows the **business applications** that Turbonomic is aware of in this deployment environment. |\n| **Action** &nbsp; 1.2.3 | Hover over the **Business Transaction** entity (2), which shows logical business functions that an end-user would execute (such as a purchase or add-to-cart). Business applications are composed of these business transactions. |\n| **Action** &nbsp; 1.2.4 | Hover over the **Service** entity (3). A service is basically a REST endpoint, and transactions use the services. |\n| **Action** &nbsp; 1.2.5 | Hover over the **Application Component** entity (4). Services are hosted and executed in an Application component, like a JVM.\n| **Action** &nbsp; 1.2.6 | Hover over the **Container** (5). Application components run on an **application platform** - for example a container platform like Kubernetes or a VM-based platform like vSphere. |\n| **Action** &nbsp; 1.2.7 | Hover over the **Virtual Machine** entity (6). Application platforms run on virtualized environments like vSphere and consume datacenter resources on-premise, and all the way out to the public cloud. |\n| **Action** &nbsp; 1.2.8 | Hover over the **Data Center** entity (7), which shows the public cloud components (defined as resources that exist in a region and in availability zones). \n\n| **1.3** | **Explore the Top Business Applications** |\n| :--- | :--- |\n| **Narration** | Let's see which Top Business Applications are at risk and  need immediate attention, ordered in terms of severity.<br/><br/>We see that RobotShop currently has SLO violations - response time is up and throughput is below expected service levels.<br/><br/>The Application Resource Health bar indicates that there are some critical performance issues (in red) as well as some areas to improve efficiency (in yellow).<br/><br/>The Actions button will take you to the Actions panel enabling you to take the recommended actions directly from Turbonomic.\n| **Action** &nbsp; 1.3.1 | Click the **Business Applications** entity, the root and first node in the supply chain. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RobotShop-SLO-Violation-5.jpg\" width=\"800\" /> |\n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>2 - Drilling into the RobotShop application</summary>\n\n<br/>\n\n| **2.1** | **Examine RobotShop resource dependencies** |\n| :--- | :--- |\n| **Narration** | Now that we have a broad understanding of the global view, let's examine the health of RobotShop. This is called 'scoping'. |\n| **Action** &nbsp; 2.1.1 | Click the **RobotShop** link to scope to RobotShop. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RobotShop-Supply-Chain.jpg\" width=\"800\" /> |\n| **Narration** | The supply chain is scoped to RobotShop, and the charts provide a quick view of RobotShop's overall operating health.<br/><br/>Turbonomic builds its application-awareness from tools like Instana and discovers Kubernetes pods via a set of deployed probes. Since RobotShop is a Kubernetes-based cloud native application, all the entities appearing in the supply chain are specific to a container platform infrastructure. The container platform is RHOCP and runs on a VMWare cluster on-premise. Hence, there are no cloud entities in the RobotShop supply chain. |\n| **Action** &nbsp; 2.1.2 | On the **Pending Actions** chart, click **Show All**.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/pending-actions-show-all-5.jpg\" width=\"500\" /> |\n| **Narration** | The Turbonomic engine performs an ongoing holistic analysis of the environment, generating actions that you can take to resolve and avoid emerging problems. <br/><br/>Here we can see container resize actions, categorized as performance and efficiency actions. These are displayed for you to either investigate further or execute directly.<br/><br/> Container Resize up actions are typically performance-centric actions that are driven to resolve an underlying resource congestion issue. Container Resize down actions are typically efficiency-centric actions that are pointing to a resource optimization opportunity, likely a consequence of resource over-provisioning. |\n| **Action** &nbsp; 2.1.3 | On the **Action Center** panel, select **Workload Controller** and click **Details**. <br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RobotShop-Performance-Action-click-DETAILS.jpg\" width=\"800\" /> |\n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>3 - Understanding the AI-derived resource optimization recommendations </summary>\n\n<br/>\n\n| **3.1** | **Analyze a RobotShop performance recommendation** |\n| :--- | :--- |\n| **Narration** | Let's explore one of the ((generated RobotShop)) performance actions recommendations in more detail. |\n| **Action** &nbsp; 3.1.1 | On the **Action Details** page, click **Expand Details** to inspect the rationale behind the recommendations.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Expand-Action-Details.jpg\" width=\"800\" /> |\n| **Narration** | The graphs show an imminent congestion for the RobotShop card pod, based on the a percentile analysis from the last 30 days observation period. A recommendation to upsize the existing memory from 100 MB to 228 MB is made. The analysis also shows that if this action is taken, it will result in a reduction of memory utilization from 82% to 36%. This memory upsizing will mitigate the detected risk of contention for memory resources.  |\n\n| **3.2** | **Analyze a RobotShop Efficiency recommendation** |\n| :--- | :--- |\n| **Narration** | When the architect initially does sizing, the values are based on best guesses and taking a safer path - typically resulting in the over-provisioning of resources. There is often opportunity to reclaim unused expensive resources and save costs. |\n| **Action** &nbsp; 3.2.1 | On the **Action Center** panel, select **rabbitmq**. Click **Details**.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/rabbitmq-overprovisioning-1.jpg\" width=\"800\" /> <br/><img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/rabbitmq-overprovisioning-2.jpg\" width=\"800\" /> |\n| **Narration** | Based on resource analysis of the RobotShop rabbitmq service, we can see that memory is over-provisioned and can be reduced. An Efficiency recommendation is made to reduce the memory of the pod from 512 MB to 384 MB. The downsizing will improve memory utilization without impacting overall service performance.<br/><br/>CPU, on the other hand, is potentially risky at 90% utilization level. The CPU congestion can result in a performance degradation of this service. A recommendation is also made to double the CPU capacity of the RobotShop rabbitmq container. |\n\n| **3.3** | **Analyze an Efficiency action** |\n| :--- | :--- |\n| **Narration** | The performance of service depends on the availability of compute resources to the encapsulating pod. The pod runs on a node, so the performance and efficiency of the node matters. We will see how Turbonomic intelligently and proactively redistributes workloads in real time to better optimize the full stack. |\n| **Action** &nbsp; 3.3.1 | On the **RobotShop** Supply chain, hover over the **Namespace** entity. Inspect the popup to get a quick view of the risks, then click **Namespace**.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RobotShop-Namespace.jpg\" width=\"500\" />\n| **Narration** | A Namespace is a logical pool of resources in a Kubernetes environment that manages workloads based on specific requirements or business needs. The Capacity and Usage chart provides a quick view into quotas set on this cluster, and the relative utilization of the resources. These quotas serve as the guardrails when making container sizing decisions. The Top Services chart shows that the RobotShop rabbitmq service can benefit from some performance and efficiency actions. |\n| **Action** &nbsp; 3.3.2 | On the **Service-robot-shop/rabbitmq** row, click **Actions**.<br/><br/>  <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RabbitMQ-Actions-Click.jpg\" width=\"800\" /> |\n| **Action** &nbsp; 3.3.3 | On the **Action Center** panel, under **Move**, select **Container Pods**, then **robotshop/rabbitmq** under **Move Actions**. Click **Details**.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/rabbitmq-Action-Details-1.jpg\" width=\"800\" /> |\n| **Narration** | The RobotShop rabbitmq service is a queueing service hosting the RabbitMQ server. Turbonomic analysis indicates that the worker node currently hosting the rabbitmq service is under-utilized and that operational efficiency can be further improved by moving this service to another worker node - consolidating the cluster resources on fewer worker nodes. The analytics also compute the approximate future resource utilization rates of the source and target worker nodes if the actions were to be taken. Without these capabilities, the alternate manual approach can be slow, reactive, error-prone and increasingly challenging as the number of services on the cluster grow.<br/><br/>Last but not least, the analytics also inform the user whether these resource optimization actions can be taken from within Turbonomic. Let's look at that next. |\n \n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>4 - Taking action and putting your application resource management into autopilot </summary>\n\n<br/>\n\n| **4.1** | **Manually executing an action** |\n| :--- | :--- |\n| **Narration** | The application resource management process generates a set of actions that the user can take to proactively avoid a potential performance issue. All actions generated appear as pending, viewable in the Pending Actions chart (as seen above). We can then determine whether to execute them manually from within Turbonomic, or to automate the action execution and remove or minimize the human intervention. Let's look at the manual execution process first. <br/<br/>Manually execute the recommended resource Efficiency action on the robot-shop/rabbitmq service. Turbonomic conveniently allows you to execute the recommended action right from within the platform. This enhances productivity as no tool hopping is necessary, and makes all the audit trails (eg, what actions were executed, by whom and when) easily available for compliance purposes if necessary. |\n| **Action** &nbsp; 4.1.1 | In the **Action Center** panel, under **Move**, select the **robot-shop/rabbitmq** action. Click **Execute Action**.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Take-Action-Manually.jpg\" width=\"800\" /> |\n\n| **4.2** | **Automate action execution and eliminate manual intervention** |\n| :--- | :--- |\n| **Narration** | RobotShop is composed of a dozen or so microservices. Given the fluctuating demand patterns and the availability of computing capacity, resource optimization actions will be continuously generated by the platform - with the sole goal of keeping RobotShop in the 'desired state'. <br/><br/>We will now briefly walk through defining automation policies to automate the execution of these actions. |\n| **Action** &nbsp; 4.2.1 | From **Settings**, click **Policies**. Then click **New Automation Policy** and select **Container Pod**.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Automation-Policy-1.jpg\" width=\"500\" /> |\n| **Narration** | The process defining an automation policy is the same across the various entity types, but the Action Types vary as they are entity specific. |\n| **Action** &nbsp; 4.2.2 | Fill out the **Action and Orchestration** panel.<br/><br/> Define the **Action Types** that will be automated by this automation policy: **Move**, **Suspend**, **Provision**.<br/><br/>Set **Action Generation** to **Generate Actions**.<br/><br/>Set **Action Acceptance** to **Automatic**.<br/><br/>**Do not** click **Submit**.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Automation-Policy-2.jpg\" width=\"500\" /> |\n| **Narration** | Once the Automation Policy is saved, it will go into effect. All actions generated such as Move, Suspend, and Provision will now be executed automatically.<br/><br/>The main benefit and best practice of Turbonomic is to execute an increasing number of actions automatically. Removing human intervention and leveraging automation will maintain application performance and improve operational efficiency. |\n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>Summary</summary>\n\n<br/>\n\nIn this demo we showed you how Turbonomic can assure the performance of your applications and improve the operational efficiency of the supporting application infrastructure. Using RobotShop, we walked through examples of how Turbonomic can augment the well-known benefits of a container platform to provide additional and high-value capabilities - ranging from intelligent container right sizing and SLA management to over-provisioning and cluster-wide workload consolidation.\n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n","type":"Mdx","contentDigest":"d03094ef199065ae1b939a3f8751ecd4","owner":"gatsby-plugin-mdx","counter":2368},"frontmatter":{"title":"Application resource management 300-level live demo","description":"Application resource management 300-level live demo","tabs":["Demo preparation","Demo script"]},"exports":{},"rawBody":"---\ntitle: Application resource management\n  300-level live demo\ndescription: Application resource management 300-level live demo\ntabs: [ 'Demo preparation', 'Demo script']\n---\n\nexport const Title = () => (\n  <span>\n    Application resource management<br/> 300-level live demo\n  </span> );\n\n![banner](./images/ARM-GitHub-script-banner-12-15-21.jpg)\n\n<span id=\"top\"></span>\n\n<details>\n<summary>Introduction</summary>\n<br/>\n\nIn this growing digital economy, the application is the business. Application performance, therefore, is one of highest CIO priorities.\n\n<br/>\n\nHome Robots Inc is a fully digital company selling innovative \"household chores\" robots globally via its RobotShop online marketplace. Clients browse and purchase through this microservices-based cloud native app. Spot promotions and other marketing events, however, generate unpredictable load patterns. The IT Ops teams, lacking full stack visibility, tend to either over or under provision resources based on best-guesses - which is highly inefficient, very costly and risky. The result? Poor application performance and bad customer experiences. \n\n<br/>\n\nMost application performance issues are similarly caused by a lack of computing resources. In this demo, I'll show you how IBM Turbonomic, a solution based on Application Resource Management, helps RobotShop's SREs and IT Ops teams proactively assure application performance and operational efficiency across their mission critical deployments.  We will:\n\n<br/>\n• See how Turbonomic stitches together a full-stack view from business applications, to the platform, all the way to the underlying physical infrastructure <br/>\n• Examine the resource optimization recommendations generated by AI-based platform analytics <br/>\n• Demonstrate how to automate execution of platform-derived 'Actions' <br/>\n\n<br/>\n\nLet's get started!\n\n<br/>\n\n**Note**: The scope of this demo will be restricted to application resource management of resources in private clouds. A different demo will illustrate application resource management as it pertains to public clouds. \n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>1 - Getting a global view of the applications and their infrastructure dependencies</summary>\n\n<br/>\n\n| **1.1** | **Ingesting data from observability platforms and other sources** |\n| :--- | :--- |\n| **Narration** | Turbonomic requires configuration and operational performance data to make resource optimization recommendations. The more data the better.<br/><br/>RobotShop is being observed by Instana. Turbonomic ingests data from APM tools and other sources and builds a common data model to 'stitch' together a graphical view of the application-to-resource dependencies. This is called the 'Supply Chain'. |\n| **Action** &nbsp; 1.1.1 | Click **Settings** (1) and select **Target Configurations** (2). Select **Instana** (3). <br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/target-configurations.jpg\" width=\"500\" /> |\n\n| **1.2** | **Examine the global supply chain** |\n| :--- | :--- |\n| **Narration** | The global supply chain graphically organizes the various entities in the IT stack. It models the dynamic relationships from the managed application, across the underlying related infrastructure layers from the on-prem data center, all the way out to the cloud.<br/><br/> Let's look at the various elements of the Turbonomic instance. Each circle represents an IT entity, and the color reflects the current health of the entities: red points to a critical risk, yellow points to areas to improve efficiency, and green is healthy. |\n| **Action** &nbsp; 1.2.1 | Log in to the Turbonomic instance and click the home **On** button. <br/><br/><img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/global-supply-chain-5.jpg\" width=\"800\" /> |\n| **Action** &nbsp; 1.2.2 | Hover over the **Business Application** entity (1), which shows the **business applications** that Turbonomic is aware of in this deployment environment. |\n| **Action** &nbsp; 1.2.3 | Hover over the **Business Transaction** entity (2), which shows logical business functions that an end-user would execute (such as a purchase or add-to-cart). Business applications are composed of these business transactions. |\n| **Action** &nbsp; 1.2.4 | Hover over the **Service** entity (3). A service is basically a REST endpoint, and transactions use the services. |\n| **Action** &nbsp; 1.2.5 | Hover over the **Application Component** entity (4). Services are hosted and executed in an Application component, like a JVM.\n| **Action** &nbsp; 1.2.6 | Hover over the **Container** (5). Application components run on an **application platform** - for example a container platform like Kubernetes or a VM-based platform like vSphere. |\n| **Action** &nbsp; 1.2.7 | Hover over the **Virtual Machine** entity (6). Application platforms run on virtualized environments like vSphere and consume datacenter resources on-premise, and all the way out to the public cloud. |\n| **Action** &nbsp; 1.2.8 | Hover over the **Data Center** entity (7), which shows the public cloud components (defined as resources that exist in a region and in availability zones). \n\n| **1.3** | **Explore the Top Business Applications** |\n| :--- | :--- |\n| **Narration** | Let's see which Top Business Applications are at risk and  need immediate attention, ordered in terms of severity.<br/><br/>We see that RobotShop currently has SLO violations - response time is up and throughput is below expected service levels.<br/><br/>The Application Resource Health bar indicates that there are some critical performance issues (in red) as well as some areas to improve efficiency (in yellow).<br/><br/>The Actions button will take you to the Actions panel enabling you to take the recommended actions directly from Turbonomic.\n| **Action** &nbsp; 1.3.1 | Click the **Business Applications** entity, the root and first node in the supply chain. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RobotShop-SLO-Violation-5.jpg\" width=\"800\" /> |\n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>2 - Drilling into the RobotShop application</summary>\n\n<br/>\n\n| **2.1** | **Examine RobotShop resource dependencies** |\n| :--- | :--- |\n| **Narration** | Now that we have a broad understanding of the global view, let's examine the health of RobotShop. This is called 'scoping'. |\n| **Action** &nbsp; 2.1.1 | Click the **RobotShop** link to scope to RobotShop. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RobotShop-Supply-Chain.jpg\" width=\"800\" /> |\n| **Narration** | The supply chain is scoped to RobotShop, and the charts provide a quick view of RobotShop's overall operating health.<br/><br/>Turbonomic builds its application-awareness from tools like Instana and discovers Kubernetes pods via a set of deployed probes. Since RobotShop is a Kubernetes-based cloud native application, all the entities appearing in the supply chain are specific to a container platform infrastructure. The container platform is RHOCP and runs on a VMWare cluster on-premise. Hence, there are no cloud entities in the RobotShop supply chain. |\n| **Action** &nbsp; 2.1.2 | On the **Pending Actions** chart, click **Show All**.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/pending-actions-show-all-5.jpg\" width=\"500\" /> |\n| **Narration** | The Turbonomic engine performs an ongoing holistic analysis of the environment, generating actions that you can take to resolve and avoid emerging problems. <br/><br/>Here we can see container resize actions, categorized as performance and efficiency actions. These are displayed for you to either investigate further or execute directly.<br/><br/> Container Resize up actions are typically performance-centric actions that are driven to resolve an underlying resource congestion issue. Container Resize down actions are typically efficiency-centric actions that are pointing to a resource optimization opportunity, likely a consequence of resource over-provisioning. |\n| **Action** &nbsp; 2.1.3 | On the **Action Center** panel, select **Workload Controller** and click **Details**. <br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RobotShop-Performance-Action-click-DETAILS.jpg\" width=\"800\" /> |\n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>3 - Understanding the AI-derived resource optimization recommendations </summary>\n\n<br/>\n\n| **3.1** | **Analyze a RobotShop performance recommendation** |\n| :--- | :--- |\n| **Narration** | Let's explore one of the ((generated RobotShop)) performance actions recommendations in more detail. |\n| **Action** &nbsp; 3.1.1 | On the **Action Details** page, click **Expand Details** to inspect the rationale behind the recommendations.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Expand-Action-Details.jpg\" width=\"800\" /> |\n| **Narration** | The graphs show an imminent congestion for the RobotShop card pod, based on the a percentile analysis from the last 30 days observation period. A recommendation to upsize the existing memory from 100 MB to 228 MB is made. The analysis also shows that if this action is taken, it will result in a reduction of memory utilization from 82% to 36%. This memory upsizing will mitigate the detected risk of contention for memory resources.  |\n\n| **3.2** | **Analyze a RobotShop Efficiency recommendation** |\n| :--- | :--- |\n| **Narration** | When the architect initially does sizing, the values are based on best guesses and taking a safer path - typically resulting in the over-provisioning of resources. There is often opportunity to reclaim unused expensive resources and save costs. |\n| **Action** &nbsp; 3.2.1 | On the **Action Center** panel, select **rabbitmq**. Click **Details**.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/rabbitmq-overprovisioning-1.jpg\" width=\"800\" /> <br/><img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/rabbitmq-overprovisioning-2.jpg\" width=\"800\" /> |\n| **Narration** | Based on resource analysis of the RobotShop rabbitmq service, we can see that memory is over-provisioned and can be reduced. An Efficiency recommendation is made to reduce the memory of the pod from 512 MB to 384 MB. The downsizing will improve memory utilization without impacting overall service performance.<br/><br/>CPU, on the other hand, is potentially risky at 90% utilization level. The CPU congestion can result in a performance degradation of this service. A recommendation is also made to double the CPU capacity of the RobotShop rabbitmq container. |\n\n| **3.3** | **Analyze an Efficiency action** |\n| :--- | :--- |\n| **Narration** | The performance of service depends on the availability of compute resources to the encapsulating pod. The pod runs on a node, so the performance and efficiency of the node matters. We will see how Turbonomic intelligently and proactively redistributes workloads in real time to better optimize the full stack. |\n| **Action** &nbsp; 3.3.1 | On the **RobotShop** Supply chain, hover over the **Namespace** entity. Inspect the popup to get a quick view of the risks, then click **Namespace**.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RobotShop-Namespace.jpg\" width=\"500\" />\n| **Narration** | A Namespace is a logical pool of resources in a Kubernetes environment that manages workloads based on specific requirements or business needs. The Capacity and Usage chart provides a quick view into quotas set on this cluster, and the relative utilization of the resources. These quotas serve as the guardrails when making container sizing decisions. The Top Services chart shows that the RobotShop rabbitmq service can benefit from some performance and efficiency actions. |\n| **Action** &nbsp; 3.3.2 | On the **Service-robot-shop/rabbitmq** row, click **Actions**.<br/><br/>  <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/RabbitMQ-Actions-Click.jpg\" width=\"800\" /> |\n| **Action** &nbsp; 3.3.3 | On the **Action Center** panel, under **Move**, select **Container Pods**, then **robotshop/rabbitmq** under **Move Actions**. Click **Details**.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/rabbitmq-Action-Details-1.jpg\" width=\"800\" /> |\n| **Narration** | The RobotShop rabbitmq service is a queueing service hosting the RabbitMQ server. Turbonomic analysis indicates that the worker node currently hosting the rabbitmq service is under-utilized and that operational efficiency can be further improved by moving this service to another worker node - consolidating the cluster resources on fewer worker nodes. The analytics also compute the approximate future resource utilization rates of the source and target worker nodes if the actions were to be taken. Without these capabilities, the alternate manual approach can be slow, reactive, error-prone and increasingly challenging as the number of services on the cluster grow.<br/><br/>Last but not least, the analytics also inform the user whether these resource optimization actions can be taken from within Turbonomic. Let's look at that next. |\n \n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>4 - Taking action and putting your application resource management into autopilot </summary>\n\n<br/>\n\n| **4.1** | **Manually executing an action** |\n| :--- | :--- |\n| **Narration** | The application resource management process generates a set of actions that the user can take to proactively avoid a potential performance issue. All actions generated appear as pending, viewable in the Pending Actions chart (as seen above). We can then determine whether to execute them manually from within Turbonomic, or to automate the action execution and remove or minimize the human intervention. Let's look at the manual execution process first. <br/<br/>Manually execute the recommended resource Efficiency action on the robot-shop/rabbitmq service. Turbonomic conveniently allows you to execute the recommended action right from within the platform. This enhances productivity as no tool hopping is necessary, and makes all the audit trails (eg, what actions were executed, by whom and when) easily available for compliance purposes if necessary. |\n| **Action** &nbsp; 4.1.1 | In the **Action Center** panel, under **Move**, select the **robot-shop/rabbitmq** action. Click **Execute Action**.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Take-Action-Manually.jpg\" width=\"800\" /> |\n\n| **4.2** | **Automate action execution and eliminate manual intervention** |\n| :--- | :--- |\n| **Narration** | RobotShop is composed of a dozen or so microservices. Given the fluctuating demand patterns and the availability of computing capacity, resource optimization actions will be continuously generated by the platform - with the sole goal of keeping RobotShop in the 'desired state'. <br/><br/>We will now briefly walk through defining automation policies to automate the execution of these actions. |\n| **Action** &nbsp; 4.2.1 | From **Settings**, click **Policies**. Then click **New Automation Policy** and select **Container Pod**.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Automation-Policy-1.jpg\" width=\"500\" /> |\n| **Narration** | The process defining an automation policy is the same across the various entity types, but the Action Types vary as they are entity specific. |\n| **Action** &nbsp; 4.2.2 | Fill out the **Action and Orchestration** panel.<br/><br/> Define the **Action Types** that will be automated by this automation policy: **Move**, **Suspend**, **Provision**.<br/><br/>Set **Action Generation** to **Generate Actions**.<br/><br/>Set **Action Acceptance** to **Automatic**.<br/><br/>**Do not** click **Submit**.<br/> <br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-watson-aiops-application-resource-management/images/Automation-Policy-2.jpg\" width=\"500\" /> |\n| **Narration** | Once the Automation Policy is saved, it will go into effect. All actions generated such as Move, Suspend, and Provision will now be executed automatically.<br/><br/>The main benefit and best practice of Turbonomic is to execute an increasing number of actions automatically. Removing human intervention and leveraging automation will maintain application performance and improve operational efficiency. |\n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>Summary</summary>\n\n<br/>\n\nIn this demo we showed you how Turbonomic can assure the performance of your applications and improve the operational efficiency of the supporting application infrastructure. Using RobotShop, we walked through examples of how Turbonomic can augment the well-known benefits of a container platform to provide additional and high-value capabilities - ranging from intelligent container right sizing and SLA management to over-provisioning and cluster-wide workload consolidation.\n\n<br/>\n\n**[Go to top](#top)**\n\n</details>\n","fileAbsolutePath":"/home/runner/work/platinum-demos/platinum-demos/src/pages/300-watson-aiops-application-resource-management/demo-script.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}