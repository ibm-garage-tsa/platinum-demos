{"componentChunkName":"component---src-pages-300-business-automation-extend-automation-with-rpa-demo-script-mdx","path":"/300-business-automation-extend-automation-with-rpa/demo-script/","result":{"pageContext":{"frontmatter":{"title":"Extend automation with RPA 300-level live demo","description":"Extend automation with RPA 300-level live demo","tabs":["Demo preparation","Demo script"]},"relativePagePath":"/300-business-automation-extend-automation-with-rpa/demo-script.mdx","titleType":"page","MdxNode":{"id":"9324953c-8887-549d-9355-6c6068a92b51","children":[],"parent":"58f39447-b91c-57b8-8495-cf77042c6d29","internal":{"content":"---\ntitle: Extend automation with RPA\n  300-level live demo\ndescription: Extend automation with RPA 300-level live demo\ntabs: [ 'Demo preparation', 'Demo script']\n---\n\nexport const Title = () => (\n  <span>\n    Extend automation with RPA <br /> 300-level live demo\n  </span>\n);\n\n<span id=\"top\"></span>\n<details>\n\n<summary>Introduction</summary>\n<br/>\n\nProcess Portal is highly customizable to fit your organization’s look and feel. The responsive user interface provides flexibility to get work done anywhere, at any time, on any device type, from a desktop device in the office to a mobile device at home or at a customer site. It can be tailored through a set of configuration options without having to customize the Process Portal application itself. <br/><br/>\n\nTo request a quote, a customer service representative initiates a new quote request and enters the customer’s policy data.\n<br/>\n\n</details>\n\n<details>\n\n<summary>1 - Quoting process without RPA</summary>\n\n<br/>\n\n| **1.1** | **Introducing the quoting process workflow without RPA** |\n| :--- | :--- |\n| **Narration** | Future Corp is a traditional auto insurance provider that has a goal of improving customer experience by making it easier to provide new insurance policy quotes to its customers. <br/><br/> Let’s look at how the company currently creates insurance quotes. In the existing process, every request for a new insurance policy must be routed to a policy specialist. |\n| **Action** | 1 - Show the process diagram for Future Corp’s current quoting process (without RPA) in Process Designer, which you opened during the demo preparation. |\n| **Screenshot** | <br/> ![](./images/Process-without-RPA.png) |\n| **Narration** | We are looking at the process diagram for Future Corp’s quoting process. Process diagrams are created in Process Designer. Process Designer is used to design and implement the quoting process. Within this low-code environment, the process diagram will control the execution of each new quote. The process diagram adheres to the Business Process Modeling Notation (BPMN). We use drag-and-drop to build the process diagram from the palette on the right. This allows us to model the process steps and flow. From there, you can drill down to complete the implementation and testing of the process application. |\n\n<br/><br/>\n\n| **1.2** | **Executing the quoting process workflow without RPA** |\n| :--- | :--- |\n| **Narration** | The Process Portal is used by customer service agents to launch new quote requests and work on assigned tasks. |\n| **Action** | 1 - Go to the **Process Portal** tab, which you opened during the demo preparation. Log in as **customerService** (password is **password**). |\n| **Screenshot** | <br/> ![](./images/Run-Process-without-RPA1.png) |\n| **Narration** | Process Portal is highly customizable to fit your organization’s look and feel. The responsive user interface provides flexibility to get work done anywhere, at any time, on any device type, from a desktop device in the office to a mobile device at home or at a customer site. It can be tailored though a set of configuration options without having to customize the Process Portal application itself. <br/><br/> To request a quote, a customer service representative initiates a new quote request and enters the customer’s policy data. |\n| **Actions** | 1 – Under **Launch**, click on **New Insurance Quote** to start a new quote <br/><br/> 2 – Use the **Get Test Data** button to pre-fill in the form with some test data <br/><br/> 3 – Optionally change the customer name and the make of the car to make this request unique <br/><br/> 4 – Click **Get Quote** to close the task, and submit the new quote request |\n| **Screenshots** | <br/> ![](./images/Run-Process-without-RPA2.png) <br/><br/> ![](./images/Run-Process-without-RPA3.png) <br/><br/> ![](./images/Run-Process-without-RPA4.png) <br/><br/> ![](./images/Run-Process-without-RPA5.png) |\n| **Narration** | Policy specialists also use the Process Portal to organize their tasks and work on the tasks assigned to them.  Our specialist has received a new task to prepare the quote. <br/><br/> When the policy specialist receives the quote request, she will need to log into the quoting system to prepare a new quote which involves manually entering a significant amount of information.  This is both time consuming and error prone as the specialist must go field-by-field in order to move all the customer’s data into the quoting system. <br/><br/> Behind the scenes, the refund process is managed by workflow.  Once the policy specialist completes this task, the system waits for the customer’s response.  If the customer accepts the quote, the policy specialist will again log into the quoting system in order to establish a new insurance policy for the customer. |\n| **Actions** | 1 – (Still on the Process Portal) Log out (as **customerService**), then log in as **policy1** (password is **password**) <br/><br/> 2 – Run the newest **Prepare New Quote** task by clicking on the task name <br/><br/> 3 – Open the legacy quoting app by using the shortcut in the bottom right of the taskbar <br/><br/> 4 – Log in to the quoting app (any username and password will work) <br/><br/> 5 – Show the task UI and the quoting app to make the point that the quote data must be manually entered into the quoting app |\n| **Screenshots** | <br/> ![](./images/Run-Process-without-RPA6.png) <br/><br/> ![](./images/Run-Process-without-RPA7.png) <br/><br/> ![](./images/Run-Process-without-RPA8.png) <br/><br/> ![](./images/Run-Process-without-RPA9.png) <br/><br/> ![](./images/Run-Process-without-RPA10.png) |\n\n<br/><br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>2 - Adding RPA to the workflow</summary>\n\n<br/>\n\n| **2.1** | **Introducing the workflow process with RPA** |\n| :--- | :--- |\n| **Narration** | Now let’s look at how we can incorporate RPA to reduce that manual work.  Here is a new version of the quoting workflow.  The workflow is the same except we’ve modified the middle swim lane.  Instead of assigning the tasks to a policy agent, we route them directly to a bot for immediate execution.  Just as with the original workflow, when there is a quoting exception, the quote request is routed to a policy specialist for resolution.  For example, certain car models such as Audi and BMW require manual review to generate a quote. |\n| **Action** | 1 - Open the process diagram for the quoting process with RPA in Process Designer |\n| **Screenshots** | <br/> ![](./images/Process-with-RPA1.png) <br/><br/> ![](./images/Process-with-RPA2.png) |\n\n<br/><br/>\n\n| **2.2** | **Bot authoring** |\n| :--- | :--- |\n| **Narration** | Using the Pak’s RPA capabilities, Future Corp was able to easily build and deploy software robots, or bots, that automatically enter customer data into the quoting system. This enabled Future Corp to automate repetitive tasks such as creating customer quotes. |\n| **Action** | 1 - Go to **RPA Studio**, which you opened during preparation, with the **GetQuote.wal** file opened to the **GetQuote** routine. |\n| **Narration** | Using the Pak’s low code bot authoring environment, Future Corp easily built and tested their bots. Hundreds of pre-built commands are available to assemble bots using intuitive wizards. <br/><br/> A manual step of the quoting process is to enter the customer data into the quoting system to generate and send a quote. With RPA, Future Corp created a bot to connect to the quoting system, fill in the extracted information and email the quote to the customer once it is available. <br/><br/> Here we see some of the bot commands they used. First, the quoting application is opened. Next, the username and password are entered. Then, commands are used to enter the data needed to generate a new quote. <br/><br/> Now let’s see how to build the quote bot from scratch. First, we’ll use the Launch and Attach Window command to open the quoting application. |\n| **Actions** | 1 - To start creating a new bot, click on **New**, select **Wal File**, and then click on **Open** <br/><br/> 2 - In the Toolbox search bar, type **attach** and find the **Launch and Attach Window** command. Drag it out to the script window. Set the executable parameter to the **FCQS.jar** file (located in c:\\Future Corp), and click on **Save**. |\n| **Screenshots** | <br/> ![](./images/New-Bot1.png) <br/><br/> ![](./images/New-Bot2.png) |\n| **Narration** | RPA Studio allow you to immediately run the bot commands. The debugging mode enables you to control the bot's operation, test commands, track variables and debug scripts on remote computers. |\n| **Actions** | 1 - In the toolbar ribbon, click on **Start** to run the bot <br/><br/> 2 - The Focus Corp Quoting System will appear |\n| **Screenshots** | <br/> ![](./images/New-Bot3.png) <br/><br/> ![](./images/New-Bot4.png) |\n| **Narration** | The recorder assists in creating your script. With the recorder, you can select user interface components to enter commands in your script with the appropriate behavior. Let’s build the commands to log into the quoting application. (In a real system, we would use our Vault for entering encrypted credentials.)  |\n| **Actions** | 1 - In the toolbar ribbon, click on **Start Recorder** to capture keystrokes from the Quoting app <br/><br/> 2 - Hold the **control** key and mouse over the **User Name** field in the Quoting app. Release the control key once the field highlights in red. Then, from the **Recording** menu, select **Actions**, **Set Value**, **By XPath**. <br/><br/> 3 - In the Set Value property page, click on the icon next to the Value to assign a variable. Then, click on the **New Variable** icon to create a new variable. <br/><br/> 4 - Name the new variable vUsername. Give it a default value of **mary**. Hit **Save** twice. <br/><br/> 5 - Hold the left control key and mouse over the **Password** field in the Quoting app. Release the control key once the field highlights in red. Then, from the **Recording** menu, select **Actions**, **Set Value**, **By XPath**. <br/><br/> 6 - In the Set Value property page, click on the icon next to the value property to assign a variable. Then, click on the **New Variable** icon to create a new variable. <br/><br/> 7 - Name the new variable **vPassword**. Give it a default value of **123**. Hit **Save** twice. <br/><br/> 8 - Hold the left control key and mouse over the **Login** button. Release the control key once the field highlights in red. Then, from the **Recording** menu, select **Actions**, **Click**, **By XPath**. <br/><br/> 9 - Click on **Save** <br/><br/> 10 - In the toolbar ribbon, click on **Stop Recorder** |\n| **Screenshots** | <br/> ![](./images/New-Bot5.png) <br/><br/> ![](./images/New-Bot6.png) <br/><br/> ![](./images/New-Bot7.png) <br/><br/> ![](./images/New-Bot7a.png) <br/><br/> ![](./images/New-Bot8.png) <br/><br/> ![](./images/New-Bot9.png) <br/><br/> ![](./images/New-Bot9a.png) <br/><br/> ![](./images/New-Bot11.png) <br/><br/> ![](./images/New-Bot11a.png) <br/><br/> ![](./images/New-Bot12.png) |\n| **Narration** | Let’s use the Run command to playback the bot again and verify the commands. We will see the quoting app open. Log in and move to the main screen. |\n| **Actions** | Close the Quoting app. In the toolbar ribbon, click on **Start**. <br/><br/> The Quoting app will open and automatically log in |\n| **Screenshots** | <br/> ![](./images/New-Bot13.png) <br/><br/> ![](./images/New-Bot14.png) |\n| **Narration** | Now let’s continue to build some additional commands to enter data into the quoting bot. |\n| **Actions** | 1 - In the toolbar ribbon, click on **Start Recorder** to capture more keystrokes from the Quoting app <br/><br/> 2 - Hold the left control key and mouse over the **Driver ID** field in the Quoting app. Then, from the **Recording** menu, select **Actions**, **Set Value**, **By XPath**. <br/><br/> 3 - In the Set Value property page, click on the icon next to the value property to assign a variable. Then, click on the **New Variable** icon to create a new variable. <br/><br/> 4 - Name the new variable **vDriverID**.  Give it a default value of **123**. Hit **Save** twice. <br/><br/> 5 - Repeat for the rest of the text input fields (or stop there if you feel you’ve shown enough) |\n| **Screenshots** | <br/> ![](./images/New-Bot15.png) <br/><br/> ![](./images/New-Bot16.png) <br/><br/> ![](./images/New-Bot17.png) <br/><br/> ![](./images/New-Bot17a.png) |\n| **Narration** | The last set of bot commands will click to generate the quote and then capture the quote amount, which is the output of this bot. |\n| **Actions** | 1 - Hold the left control key and mouse over the **CREATE NEW QUOTE** button. Then, from the **Recording** menu, select **Actions**, **Click**, **By XPath**. <br/><br/> 2 - Finally, get the quote result. In the Quote app, hold the left control key and mouse over the **Total premium** field. Release the control key once the field highlights in red. Then, from the **Recording** menu, select **Actions**, **Get Value**, **By XPath**. <br/><br/> 3 - In the Set Value property page, click on the icon next to the value property to assign a variable. Then, click on the **New Variable** icon to create a new variable. <br/><br/> 4 - Name the new variable **vQuoteValue**, and hit **Save** twice <br/><br/> 5 - Add a command to log the quote value. In the toolbox, search for **log**. Drag the **Log Message** command to the bottom of the bot script. <br/><br/> 6 - Complete the log command by searching for and selecting the **vQuoteValue** variable <br/><br/> 7 - Now let’s do a last playback of the bot by clicking on **Start**. The bot will create the quote, and the quote amount will appear in the **Output** window. |\n| **Screenshots** | <br/> ![](./images/New-Bot18.png) <br/><br/> ![](./images/New-Bot19.png) <br/><br/> ![](./images/New-Bot20.png) <br/><br/> ![](./images/New-Bot20a.png) <br/><br/> ![](./images/New-Bot21.png) <br/><br/> ![](./images/New-Bot22.png) <br/><br/> ![](./images/New-Bot23.png) |\n\n<br/><br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>3 - Executing the workflow with RPA</summary>\n\n<br/>\n\n| **3.1** | **Executing the quoting process with RPA** |\n| :--- | :--- |\n| **Narration** | Let’s make a new request using the new RPA-enabled workflow. I’ll log back in as the customer service representative and start a new quote. The RPA bot is set up to run on this same system.  Now that I have submitted the new request, we will see the quoting app automatically launch and enter the quote request data into the quoting system. |\n| **Actions** | 1 - Open the **Process Portal**, and log in as **customerService** <br/><br/> 2 - Launch the New Insurance Quote RPA process <br/><br/> 3 – Use the **Get Test Data** button to pre-fill the form with some test data <br/><br/> 4 – Optionally change the name and/or the make of the car to make this request unique <br/><br/> 5 – Click on **Get Quote** to close the task and submit the new quote request <br/><br/> 6 - In a few seconds, see the Quoting App launch automatically and complete the quote |\n| **Screenshots** | <br/> ![](./images/Run-process-with-RPA1.png) <br/><br/> ![](./images/Run-process-with-RPA2.png) <br/><br/> ![](./images/Run-Process-with-RPA3.png) <br/><br/> ![](./images/Run-Process-with-RPA4.png) <br/><br/> ![](./images/Run-Process-with-RPA5.png) |\n\n<br/><br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>4 - Introducing RPA Chatbots to further extend the automation</summary>\n\n<br/>\n\n| **4.1** | **Reviewing the chatbot script** |\n| :--- | :--- |\n| **Narration** | Next, let’s look at the bot script for the Customer Agent chatbot. Future Corp’s chatbot is also assembled by dragging and dropping commands and configuring them using pop-up property sheets. Chatbot commands can inserted anywhere inside the bot script. Since chatbot capabilities are fully integrated, Future Corp was able to build both their bots and chatbots using one single tool. |\n| **Action** | 1 - Search for the chatbot commands by typing **bot** into the toolbox search. Discuss some of the chatbot commands available in IBM RPA. |\n| **Screenshot** | <br/> ![](./images/Chatbot1.png) |\n| **Narration** | The Bot Ask and Answer command is used to have the bot ask the customer a question in a chat. The answer is recognized using a knowledgebase prepared for the chat subject. Bot Studio includes the machine learning model builder used by Future Corp for creating and training the knowledgebase. Future Corp’s RPA team found training the knowledgebase to be very simple. |\n| **Actions** | 1 - Open the Bot Ask and Answer command in the bot script <br/><br/> 2 - Show how the command is connected to a knowledgebase <br/><br/> 3 - Next, open the knowledgebase definition. Click on the Knowledgebases tab, and then open **IngridKB Version 1**. |\n| **Screenshots** | <br/> ![](./images/Chatbot2.png) <br/><br/> ![](./images/Chatbot3.png) <br/><br/> ![](./images/Chatbot4.png) |\n| **Narration** | Type a message, and the knowledgebase will answer according to how it is defined. To the right, the related questions window shows a list of similar questions which would result in a similar response. To the left, the score for the currently selected answer is displayed. They can also search the knowledgebase for another answer, edit the current answer, or even add a new answer. |\n| **Actions** | 1 - The Trainer view opens. Type the following question: **I have a policy issue with my current provider.** Then, hit **enter**. <br/><br/> 2 - Discuss the low score. Then, type the following: **I have a problem with my policy. I want a new one.** Then, hit **enter**. <br/><br/> 3 - Discuss the low score. Click on **Select** (next to **Of course! Let’s start.**) to train the knowledgebase. <br/><br/> 4 - Now the score goes to a perfect 1000.  Click on **Retrain** to update the knowledge base. <br/><br/> 5 - Now enter the first interaction again. Type the following: **I have a policy issue with my current provider. I need a new one.** Hit **enter**. <br/><br/> 6 - See how the score improved <br/><br/> 7 - When you close the knowledgebase (which you might do later), be sure to **NOT SAVE** so that this example works the next time you give a demo. |\n| **Screenshots** | <br/> ![](./images/Chatbot5.png) <br/><br/> ![](./images/Chatbot6.png) <br/><br/> ![](./images/Chatbot7.png) <br/><br/> ![](./images/Chatbot8.png) <br/><br/> ![](./images/Chatbot9.png) <br/><br/> ![](./images/Chatbot10.png) <br/><br/> ![](./images/Chatbot11.png) |\n\n<br/><br/>\n\n| **4.2** | **Running the chatbot** |\n| :--- | :--- |\n| **Narration** | Now let’s see how we have enhanced the customer’s interaction with the quoting process. As an alternative to the web form that collects the customer’s quoting data, Future Corp’s intelligent RPA chatbot provides an interactive virtual agent. <br/><br/> The chatbot can understand and respond to customer inquiries.  For example, a chatbot recognizes that phrases like “I would like to switch my insurance policy” and “I need insurance” both lead to initiating the quoting process. |\n| **Actions** | 1 - Select the **Insurance Ingrid** script, and click on **Start** <br/><br/> 2 - Type the following: **I need insurance** |\n| **Screenshots** | <br/> ![](./images/Run-chatbot1.png) <br/><br/> ![](./images/Run-chatbot2.png) |\n| **Narration** | The chatbot can continue to have an engaging conversation with the customer to collect all the information needed to provide a quote. |\n| **Actions** | 1 - Select **Car** <br/><br/> 2 - Enter **BMW**,**X7**,**2021** <br/><br/> 3 - Enter the vehicle identification number (VIN), which typically consists of 12 characters (for example, enter **123456789012**) <br/><br/> 4 - Enter the following: **My email is mary@email.com** <br/><br/> 5 - Enter the following: **Mary, Johnson** <br/><br/> 6 - Enter an address |\n| **Screenshots** | <br/> ![](./images/Run-chatbot3.png) <br/><br/> ![](./images/Run-chatbot4.png) <br/><br/> ![](./images/Run-chatbot5.png) <br/><br/> ![](./images/Run-chatbot6.png) <br/><br/> ![](./images/Run-chatbot7.png) <br/><br/> ![](./images/Run-chatbot8.png) |\n| **Narration** | Once all of the information is collected, the quoting bot will be invoked to complete the quote. |\n| **Actions** | 1 - Enter **yes** for quick quote <br/><br/> 2 - Enter **yes** for follow-up contact <br/><br/> 3 - Enter **no** for anything else |\n| **Screenshots** | <br/> ![](./images/Run-chatbot9.png) <br/><br/> ![](./images/Run-chatbot10.png) <br/><br/> ![](./images/Run-chatbot11.png) |\n\n<br/><br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n<summary>Summary</summary>\n\n<br/>\nUsing the Cloud Pak for Business Automation, Future Corp had everything they needed to extend their automation with RPA. They used a low-code bot authoring environment to create both bots and chatbots to improve their policy quoting process.\n<br/><br/>\n\n**[Go to top](#top)**\n\n</details>\n","type":"Mdx","contentDigest":"66437242c0b53f98c1dbc8d6c68bd50d","owner":"gatsby-plugin-mdx","counter":2068},"frontmatter":{"title":"Extend automation with RPA 300-level live demo","description":"Extend automation with RPA 300-level live demo","tabs":["Demo preparation","Demo script"]},"exports":{},"rawBody":"---\ntitle: Extend automation with RPA\n  300-level live demo\ndescription: Extend automation with RPA 300-level live demo\ntabs: [ 'Demo preparation', 'Demo script']\n---\n\nexport const Title = () => (\n  <span>\n    Extend automation with RPA <br /> 300-level live demo\n  </span>\n);\n\n<span id=\"top\"></span>\n<details>\n\n<summary>Introduction</summary>\n<br/>\n\nProcess Portal is highly customizable to fit your organization’s look and feel. The responsive user interface provides flexibility to get work done anywhere, at any time, on any device type, from a desktop device in the office to a mobile device at home or at a customer site. It can be tailored through a set of configuration options without having to customize the Process Portal application itself. <br/><br/>\n\nTo request a quote, a customer service representative initiates a new quote request and enters the customer’s policy data.\n<br/>\n\n</details>\n\n<details>\n\n<summary>1 - Quoting process without RPA</summary>\n\n<br/>\n\n| **1.1** | **Introducing the quoting process workflow without RPA** |\n| :--- | :--- |\n| **Narration** | Future Corp is a traditional auto insurance provider that has a goal of improving customer experience by making it easier to provide new insurance policy quotes to its customers. <br/><br/> Let’s look at how the company currently creates insurance quotes. In the existing process, every request for a new insurance policy must be routed to a policy specialist. |\n| **Action** | 1 - Show the process diagram for Future Corp’s current quoting process (without RPA) in Process Designer, which you opened during the demo preparation. |\n| **Screenshot** | <br/> ![](./images/Process-without-RPA.png) |\n| **Narration** | We are looking at the process diagram for Future Corp’s quoting process. Process diagrams are created in Process Designer. Process Designer is used to design and implement the quoting process. Within this low-code environment, the process diagram will control the execution of each new quote. The process diagram adheres to the Business Process Modeling Notation (BPMN). We use drag-and-drop to build the process diagram from the palette on the right. This allows us to model the process steps and flow. From there, you can drill down to complete the implementation and testing of the process application. |\n\n<br/><br/>\n\n| **1.2** | **Executing the quoting process workflow without RPA** |\n| :--- | :--- |\n| **Narration** | The Process Portal is used by customer service agents to launch new quote requests and work on assigned tasks. |\n| **Action** | 1 - Go to the **Process Portal** tab, which you opened during the demo preparation. Log in as **customerService** (password is **password**). |\n| **Screenshot** | <br/> ![](./images/Run-Process-without-RPA1.png) |\n| **Narration** | Process Portal is highly customizable to fit your organization’s look and feel. The responsive user interface provides flexibility to get work done anywhere, at any time, on any device type, from a desktop device in the office to a mobile device at home or at a customer site. It can be tailored though a set of configuration options without having to customize the Process Portal application itself. <br/><br/> To request a quote, a customer service representative initiates a new quote request and enters the customer’s policy data. |\n| **Actions** | 1 – Under **Launch**, click on **New Insurance Quote** to start a new quote <br/><br/> 2 – Use the **Get Test Data** button to pre-fill in the form with some test data <br/><br/> 3 – Optionally change the customer name and the make of the car to make this request unique <br/><br/> 4 – Click **Get Quote** to close the task, and submit the new quote request |\n| **Screenshots** | <br/> ![](./images/Run-Process-without-RPA2.png) <br/><br/> ![](./images/Run-Process-without-RPA3.png) <br/><br/> ![](./images/Run-Process-without-RPA4.png) <br/><br/> ![](./images/Run-Process-without-RPA5.png) |\n| **Narration** | Policy specialists also use the Process Portal to organize their tasks and work on the tasks assigned to them.  Our specialist has received a new task to prepare the quote. <br/><br/> When the policy specialist receives the quote request, she will need to log into the quoting system to prepare a new quote which involves manually entering a significant amount of information.  This is both time consuming and error prone as the specialist must go field-by-field in order to move all the customer’s data into the quoting system. <br/><br/> Behind the scenes, the refund process is managed by workflow.  Once the policy specialist completes this task, the system waits for the customer’s response.  If the customer accepts the quote, the policy specialist will again log into the quoting system in order to establish a new insurance policy for the customer. |\n| **Actions** | 1 – (Still on the Process Portal) Log out (as **customerService**), then log in as **policy1** (password is **password**) <br/><br/> 2 – Run the newest **Prepare New Quote** task by clicking on the task name <br/><br/> 3 – Open the legacy quoting app by using the shortcut in the bottom right of the taskbar <br/><br/> 4 – Log in to the quoting app (any username and password will work) <br/><br/> 5 – Show the task UI and the quoting app to make the point that the quote data must be manually entered into the quoting app |\n| **Screenshots** | <br/> ![](./images/Run-Process-without-RPA6.png) <br/><br/> ![](./images/Run-Process-without-RPA7.png) <br/><br/> ![](./images/Run-Process-without-RPA8.png) <br/><br/> ![](./images/Run-Process-without-RPA9.png) <br/><br/> ![](./images/Run-Process-without-RPA10.png) |\n\n<br/><br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>2 - Adding RPA to the workflow</summary>\n\n<br/>\n\n| **2.1** | **Introducing the workflow process with RPA** |\n| :--- | :--- |\n| **Narration** | Now let’s look at how we can incorporate RPA to reduce that manual work.  Here is a new version of the quoting workflow.  The workflow is the same except we’ve modified the middle swim lane.  Instead of assigning the tasks to a policy agent, we route them directly to a bot for immediate execution.  Just as with the original workflow, when there is a quoting exception, the quote request is routed to a policy specialist for resolution.  For example, certain car models such as Audi and BMW require manual review to generate a quote. |\n| **Action** | 1 - Open the process diagram for the quoting process with RPA in Process Designer |\n| **Screenshots** | <br/> ![](./images/Process-with-RPA1.png) <br/><br/> ![](./images/Process-with-RPA2.png) |\n\n<br/><br/>\n\n| **2.2** | **Bot authoring** |\n| :--- | :--- |\n| **Narration** | Using the Pak’s RPA capabilities, Future Corp was able to easily build and deploy software robots, or bots, that automatically enter customer data into the quoting system. This enabled Future Corp to automate repetitive tasks such as creating customer quotes. |\n| **Action** | 1 - Go to **RPA Studio**, which you opened during preparation, with the **GetQuote.wal** file opened to the **GetQuote** routine. |\n| **Narration** | Using the Pak’s low code bot authoring environment, Future Corp easily built and tested their bots. Hundreds of pre-built commands are available to assemble bots using intuitive wizards. <br/><br/> A manual step of the quoting process is to enter the customer data into the quoting system to generate and send a quote. With RPA, Future Corp created a bot to connect to the quoting system, fill in the extracted information and email the quote to the customer once it is available. <br/><br/> Here we see some of the bot commands they used. First, the quoting application is opened. Next, the username and password are entered. Then, commands are used to enter the data needed to generate a new quote. <br/><br/> Now let’s see how to build the quote bot from scratch. First, we’ll use the Launch and Attach Window command to open the quoting application. |\n| **Actions** | 1 - To start creating a new bot, click on **New**, select **Wal File**, and then click on **Open** <br/><br/> 2 - In the Toolbox search bar, type **attach** and find the **Launch and Attach Window** command. Drag it out to the script window. Set the executable parameter to the **FCQS.jar** file (located in c:\\Future Corp), and click on **Save**. |\n| **Screenshots** | <br/> ![](./images/New-Bot1.png) <br/><br/> ![](./images/New-Bot2.png) |\n| **Narration** | RPA Studio allow you to immediately run the bot commands. The debugging mode enables you to control the bot's operation, test commands, track variables and debug scripts on remote computers. |\n| **Actions** | 1 - In the toolbar ribbon, click on **Start** to run the bot <br/><br/> 2 - The Focus Corp Quoting System will appear |\n| **Screenshots** | <br/> ![](./images/New-Bot3.png) <br/><br/> ![](./images/New-Bot4.png) |\n| **Narration** | The recorder assists in creating your script. With the recorder, you can select user interface components to enter commands in your script with the appropriate behavior. Let’s build the commands to log into the quoting application. (In a real system, we would use our Vault for entering encrypted credentials.)  |\n| **Actions** | 1 - In the toolbar ribbon, click on **Start Recorder** to capture keystrokes from the Quoting app <br/><br/> 2 - Hold the **control** key and mouse over the **User Name** field in the Quoting app. Release the control key once the field highlights in red. Then, from the **Recording** menu, select **Actions**, **Set Value**, **By XPath**. <br/><br/> 3 - In the Set Value property page, click on the icon next to the Value to assign a variable. Then, click on the **New Variable** icon to create a new variable. <br/><br/> 4 - Name the new variable vUsername. Give it a default value of **mary**. Hit **Save** twice. <br/><br/> 5 - Hold the left control key and mouse over the **Password** field in the Quoting app. Release the control key once the field highlights in red. Then, from the **Recording** menu, select **Actions**, **Set Value**, **By XPath**. <br/><br/> 6 - In the Set Value property page, click on the icon next to the value property to assign a variable. Then, click on the **New Variable** icon to create a new variable. <br/><br/> 7 - Name the new variable **vPassword**. Give it a default value of **123**. Hit **Save** twice. <br/><br/> 8 - Hold the left control key and mouse over the **Login** button. Release the control key once the field highlights in red. Then, from the **Recording** menu, select **Actions**, **Click**, **By XPath**. <br/><br/> 9 - Click on **Save** <br/><br/> 10 - In the toolbar ribbon, click on **Stop Recorder** |\n| **Screenshots** | <br/> ![](./images/New-Bot5.png) <br/><br/> ![](./images/New-Bot6.png) <br/><br/> ![](./images/New-Bot7.png) <br/><br/> ![](./images/New-Bot7a.png) <br/><br/> ![](./images/New-Bot8.png) <br/><br/> ![](./images/New-Bot9.png) <br/><br/> ![](./images/New-Bot9a.png) <br/><br/> ![](./images/New-Bot11.png) <br/><br/> ![](./images/New-Bot11a.png) <br/><br/> ![](./images/New-Bot12.png) |\n| **Narration** | Let’s use the Run command to playback the bot again and verify the commands. We will see the quoting app open. Log in and move to the main screen. |\n| **Actions** | Close the Quoting app. In the toolbar ribbon, click on **Start**. <br/><br/> The Quoting app will open and automatically log in |\n| **Screenshots** | <br/> ![](./images/New-Bot13.png) <br/><br/> ![](./images/New-Bot14.png) |\n| **Narration** | Now let’s continue to build some additional commands to enter data into the quoting bot. |\n| **Actions** | 1 - In the toolbar ribbon, click on **Start Recorder** to capture more keystrokes from the Quoting app <br/><br/> 2 - Hold the left control key and mouse over the **Driver ID** field in the Quoting app. Then, from the **Recording** menu, select **Actions**, **Set Value**, **By XPath**. <br/><br/> 3 - In the Set Value property page, click on the icon next to the value property to assign a variable. Then, click on the **New Variable** icon to create a new variable. <br/><br/> 4 - Name the new variable **vDriverID**.  Give it a default value of **123**. Hit **Save** twice. <br/><br/> 5 - Repeat for the rest of the text input fields (or stop there if you feel you’ve shown enough) |\n| **Screenshots** | <br/> ![](./images/New-Bot15.png) <br/><br/> ![](./images/New-Bot16.png) <br/><br/> ![](./images/New-Bot17.png) <br/><br/> ![](./images/New-Bot17a.png) |\n| **Narration** | The last set of bot commands will click to generate the quote and then capture the quote amount, which is the output of this bot. |\n| **Actions** | 1 - Hold the left control key and mouse over the **CREATE NEW QUOTE** button. Then, from the **Recording** menu, select **Actions**, **Click**, **By XPath**. <br/><br/> 2 - Finally, get the quote result. In the Quote app, hold the left control key and mouse over the **Total premium** field. Release the control key once the field highlights in red. Then, from the **Recording** menu, select **Actions**, **Get Value**, **By XPath**. <br/><br/> 3 - In the Set Value property page, click on the icon next to the value property to assign a variable. Then, click on the **New Variable** icon to create a new variable. <br/><br/> 4 - Name the new variable **vQuoteValue**, and hit **Save** twice <br/><br/> 5 - Add a command to log the quote value. In the toolbox, search for **log**. Drag the **Log Message** command to the bottom of the bot script. <br/><br/> 6 - Complete the log command by searching for and selecting the **vQuoteValue** variable <br/><br/> 7 - Now let’s do a last playback of the bot by clicking on **Start**. The bot will create the quote, and the quote amount will appear in the **Output** window. |\n| **Screenshots** | <br/> ![](./images/New-Bot18.png) <br/><br/> ![](./images/New-Bot19.png) <br/><br/> ![](./images/New-Bot20.png) <br/><br/> ![](./images/New-Bot20a.png) <br/><br/> ![](./images/New-Bot21.png) <br/><br/> ![](./images/New-Bot22.png) <br/><br/> ![](./images/New-Bot23.png) |\n\n<br/><br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>3 - Executing the workflow with RPA</summary>\n\n<br/>\n\n| **3.1** | **Executing the quoting process with RPA** |\n| :--- | :--- |\n| **Narration** | Let’s make a new request using the new RPA-enabled workflow. I’ll log back in as the customer service representative and start a new quote. The RPA bot is set up to run on this same system.  Now that I have submitted the new request, we will see the quoting app automatically launch and enter the quote request data into the quoting system. |\n| **Actions** | 1 - Open the **Process Portal**, and log in as **customerService** <br/><br/> 2 - Launch the New Insurance Quote RPA process <br/><br/> 3 – Use the **Get Test Data** button to pre-fill the form with some test data <br/><br/> 4 – Optionally change the name and/or the make of the car to make this request unique <br/><br/> 5 – Click on **Get Quote** to close the task and submit the new quote request <br/><br/> 6 - In a few seconds, see the Quoting App launch automatically and complete the quote |\n| **Screenshots** | <br/> ![](./images/Run-process-with-RPA1.png) <br/><br/> ![](./images/Run-process-with-RPA2.png) <br/><br/> ![](./images/Run-Process-with-RPA3.png) <br/><br/> ![](./images/Run-Process-with-RPA4.png) <br/><br/> ![](./images/Run-Process-with-RPA5.png) |\n\n<br/><br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n\n<summary>4 - Introducing RPA Chatbots to further extend the automation</summary>\n\n<br/>\n\n| **4.1** | **Reviewing the chatbot script** |\n| :--- | :--- |\n| **Narration** | Next, let’s look at the bot script for the Customer Agent chatbot. Future Corp’s chatbot is also assembled by dragging and dropping commands and configuring them using pop-up property sheets. Chatbot commands can inserted anywhere inside the bot script. Since chatbot capabilities are fully integrated, Future Corp was able to build both their bots and chatbots using one single tool. |\n| **Action** | 1 - Search for the chatbot commands by typing **bot** into the toolbox search. Discuss some of the chatbot commands available in IBM RPA. |\n| **Screenshot** | <br/> ![](./images/Chatbot1.png) |\n| **Narration** | The Bot Ask and Answer command is used to have the bot ask the customer a question in a chat. The answer is recognized using a knowledgebase prepared for the chat subject. Bot Studio includes the machine learning model builder used by Future Corp for creating and training the knowledgebase. Future Corp’s RPA team found training the knowledgebase to be very simple. |\n| **Actions** | 1 - Open the Bot Ask and Answer command in the bot script <br/><br/> 2 - Show how the command is connected to a knowledgebase <br/><br/> 3 - Next, open the knowledgebase definition. Click on the Knowledgebases tab, and then open **IngridKB Version 1**. |\n| **Screenshots** | <br/> ![](./images/Chatbot2.png) <br/><br/> ![](./images/Chatbot3.png) <br/><br/> ![](./images/Chatbot4.png) |\n| **Narration** | Type a message, and the knowledgebase will answer according to how it is defined. To the right, the related questions window shows a list of similar questions which would result in a similar response. To the left, the score for the currently selected answer is displayed. They can also search the knowledgebase for another answer, edit the current answer, or even add a new answer. |\n| **Actions** | 1 - The Trainer view opens. Type the following question: **I have a policy issue with my current provider.** Then, hit **enter**. <br/><br/> 2 - Discuss the low score. Then, type the following: **I have a problem with my policy. I want a new one.** Then, hit **enter**. <br/><br/> 3 - Discuss the low score. Click on **Select** (next to **Of course! Let’s start.**) to train the knowledgebase. <br/><br/> 4 - Now the score goes to a perfect 1000.  Click on **Retrain** to update the knowledge base. <br/><br/> 5 - Now enter the first interaction again. Type the following: **I have a policy issue with my current provider. I need a new one.** Hit **enter**. <br/><br/> 6 - See how the score improved <br/><br/> 7 - When you close the knowledgebase (which you might do later), be sure to **NOT SAVE** so that this example works the next time you give a demo. |\n| **Screenshots** | <br/> ![](./images/Chatbot5.png) <br/><br/> ![](./images/Chatbot6.png) <br/><br/> ![](./images/Chatbot7.png) <br/><br/> ![](./images/Chatbot8.png) <br/><br/> ![](./images/Chatbot9.png) <br/><br/> ![](./images/Chatbot10.png) <br/><br/> ![](./images/Chatbot11.png) |\n\n<br/><br/>\n\n| **4.2** | **Running the chatbot** |\n| :--- | :--- |\n| **Narration** | Now let’s see how we have enhanced the customer’s interaction with the quoting process. As an alternative to the web form that collects the customer’s quoting data, Future Corp’s intelligent RPA chatbot provides an interactive virtual agent. <br/><br/> The chatbot can understand and respond to customer inquiries.  For example, a chatbot recognizes that phrases like “I would like to switch my insurance policy” and “I need insurance” both lead to initiating the quoting process. |\n| **Actions** | 1 - Select the **Insurance Ingrid** script, and click on **Start** <br/><br/> 2 - Type the following: **I need insurance** |\n| **Screenshots** | <br/> ![](./images/Run-chatbot1.png) <br/><br/> ![](./images/Run-chatbot2.png) |\n| **Narration** | The chatbot can continue to have an engaging conversation with the customer to collect all the information needed to provide a quote. |\n| **Actions** | 1 - Select **Car** <br/><br/> 2 - Enter **BMW**,**X7**,**2021** <br/><br/> 3 - Enter the vehicle identification number (VIN), which typically consists of 12 characters (for example, enter **123456789012**) <br/><br/> 4 - Enter the following: **My email is mary@email.com** <br/><br/> 5 - Enter the following: **Mary, Johnson** <br/><br/> 6 - Enter an address |\n| **Screenshots** | <br/> ![](./images/Run-chatbot3.png) <br/><br/> ![](./images/Run-chatbot4.png) <br/><br/> ![](./images/Run-chatbot5.png) <br/><br/> ![](./images/Run-chatbot6.png) <br/><br/> ![](./images/Run-chatbot7.png) <br/><br/> ![](./images/Run-chatbot8.png) |\n| **Narration** | Once all of the information is collected, the quoting bot will be invoked to complete the quote. |\n| **Actions** | 1 - Enter **yes** for quick quote <br/><br/> 2 - Enter **yes** for follow-up contact <br/><br/> 3 - Enter **no** for anything else |\n| **Screenshots** | <br/> ![](./images/Run-chatbot9.png) <br/><br/> ![](./images/Run-chatbot10.png) <br/><br/> ![](./images/Run-chatbot11.png) |\n\n<br/><br/>\n\n**[Go to top](#top)**\n\n</details>\n\n<details>\n<summary>Summary</summary>\n\n<br/>\nUsing the Cloud Pak for Business Automation, Future Corp had everything they needed to extend their automation with RPA. They used a low-code bot authoring environment to create both bots and chatbots to improve their policy quoting process.\n<br/><br/>\n\n**[Go to top](#top)**\n\n</details>\n","fileAbsolutePath":"/home/runner/work/platinum-demos/platinum-demos/src/pages/300-business-automation-extend-automation-with-rpa/demo-script.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}