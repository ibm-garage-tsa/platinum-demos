{"componentChunkName":"component---src-pages-300-integration-event-endpoint-management-demo-script-mdx","path":"/300-integration-event-endpoint-management/demo-script/","result":{"pageContext":{"frontmatter":{"title":"Event endpoint management 300-level live demo","description":"Event endpoint management","tabs":["Demo preparation","Demo script"]},"relativePagePath":"/300-integration-event-endpoint-management/demo-script.mdx","titleType":"page","MdxNode":{"id":"d354c653-de49-5c2a-8cfa-8872e429a8e9","children":[],"parent":"f94b164d-befd-565e-b99e-9bfec6ec0996","internal":{"content":"---\ntitle: Event endpoint management\n  300-level live demo\ndescription: Event endpoint management\ntabs: [ 'Demo preparation', 'Demo script']\n---\n\nexport const Title = () => (\n  <span>\n    Event endpoint management <br /> 300-level live demo\n  </span> );\n\n![banner](./images/300-eem-script-GitHub-banner-8-3-21-short.jpg)\n<span id=\"place1\"></span>\n\n<details>\n\n<summary>Introduction</summary>\n\n<br/>\n\nIn this demo we’ll explore how the data from an airports flight information system gets distributed to various other systems. These will include a Flight Information Board, and a mobile application for an airline. The Flight Information Board gets flight information using a traditional API. We will show how a new event stream for flight information on can be easily made available to the developers of the airline mobile application. This will enable the mobile app to receive flight delays the moment they occur, resulting in an improved and more marketable experience.\n\n<br/>\n\nWe will explore how we satisfy the requirements of a restaurant that wants to place time-sensitive advertisements on an airline's mobile application.\n\n<br/>\n\nLet’s get started!\n\n<br/>\n\n(Demo intro slides <a href=\"https://ibm.box.com/s/tph26q1zzqhix1t1fkm2ukyc9eqgwdbg\" target=\"_blank\" rel=\"noreferrer\">here</a>)\n\n<br/>\n\n(Printer-ready PDF of demo script <a href=\"./300-Integration-event-endpoint-management-Demo-Script.pdf\" target=\"_blank\" rel=\"noreferrer\">here</a>)\n\n<br/>\n\n</details>\n\n<details>\n\n<summary>1 - Exploring the Flight Information Manager UI</summary>\n\n<br/>\n\n| **1.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | Let’s first take a look at the flight information system itself so we understand the data we’re dealing with. The user interface for the flight information system is known as the Flight Information Manager. It shows us the current flights, and also provides us with a mechanism to add a delay to the anticipated departure time of a flight. |\n| **Action** &nbsp; 1.1.1 | Show the Flight Information Manager UI, as highlighted in the narration above. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-1-1-1.png\" width=\"800\" /> |\n| **Narration** | The Flight Information Manager uses a REST API available on the Flight Information Data Store. This API is only directly available to the Flight Information Manager user interface since it has the ability to perform sensitive functions, such as delaying the arrival time of a flight. |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>2 - Exploring the Flight Information REST API in the Portal </summary>\n\n<br/>\n\n| **2.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | There are other systems, such as the Flight Information Boards around the airport that also need access to flight data but do not need access to the whole API. For example, the Flight Information Board should not have access to the API function to “delay” a flight.  An API management capability (IBM API Connect) is used to expose selected data and functions from the API in a Developer Portal. The developers of other applications can browse the various APIs available at the airport, and self-subscribe to use them in their applications. This means that their usage of the API can be tracked, controlled (e.g. rate limited) and indeed revoked. Lets take a quick look at the exposed REST API for flight information. |\n| **Action** &nbsp; 2.1.1 | Go to the API management Portal and show the exposed REST API for flight information, noting that there is only a GET operation. |\n| **Action** &nbsp; 2.1.2 | Show the IBM API Connect Developer Portal tab in the browser. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-2-1-2.png\" width=\"800\" /> |\n| **Action** &nbsp; 2.1.3 | Click **API Products**. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-2-1-3.png\" width=\"800\" /> |\n| **Action** &nbsp; 2.1.4 | Click **Flight API**. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-2-1-4.png\" width=\"800\" /> |\n| **Action** &nbsp; 2.1.5 | Click **Flight API 1.0.0**. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-2-1-5.png\" width=\"800\" /> |\n| **Action** &nbsp; 2.1.6 | Click the **GET /flights** operation. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-2-1-6.png\" width=\"800\" /> |\n| **Narration** | Note that we’ve been able to explore this API right down to what operations are available, and even example data that would be returned. However, we cannot make calls on this API because we have not yet requested access to it. API Connect ensures only known consumers of the API can use it. |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>3 - Displaying the flight board </summary>\n\n<br/>\n\n| **3.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | The Flight Information Board is one of the consumers of this flight information API. It retrieves the data every 5 minutes to get the latest flight information. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |\n| **Action** &nbsp; 3.1.1 | Bring up the Flight Information Board UI.  <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-3-1-1.png\" width=\"800\" /> |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>4 - Exploring the update rate of the Flight Information Board  </summary>\n\n<br/>\n\n| **4.1** | **TBD** |\n| :--- | :--- |\n| **Narration** |  Note that if we delay a flight using the Flight Information Manager, although it shows the new time straight away in that user interface, the Flight Information Board only picks up the change when it next polls the API, several minutes later.   |\n| **Action** &nbsp; 4.1.1 | Show both the Flight Information Manager and the Flight Information Board on screen at the same time. Both screens are showing the same for now.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-4-1-1.png\" width=\"800\" /> |\n| **Action** &nbsp; 4.1.2 | Click on one of the **Delay this flight** (1) buttons, enter **60** (2) for the minutes to be delayed, and click **OK** (3).<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-4-1-2.png\" width=\"800\" /> |\n| **Action** &nbsp; 4.1.3 | Show that the flight departure time has been updated on the manager only.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-4-1-3.png\" width=\"800\" /> |\n| **Action** &nbsp; 4.1.4 | If required, wait 5 minutes to show that the Flight Board is updated. |\n| **Narration** |  Clearly, we could reduce the poll interval to something that might be more responsive, but as we reduce this interval, we are increasing the load on the Flight Information Data Store. Note that there could be many other systems also requiring this information in a timely fashion (eg., taxi companies, ground crew systems, airlines). If they were all to poll with short time intervals, the Flight Information Data Store would quickly become overwhelmed. The Flight Information Data Store could of course implement performance measures such as caching, but it would end up having to cater to constantly increasing demands of consumers, in terms of both performance, and availability. <br/><br/><InlineNotification><strong>Narration Tip</strong>: This is a good time to discuss how common this situation is across scenarios in other industries where APIs are a commonly used way to provide data, but do not make it easy to receive data changes in a timely way.</InlineNotification> |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>5 - Introducing Events, Kafka, and IBM Event Streams  </summary>\n\n<br/>\n\n| **5.1** | **TBD** |\n| :--- | :--- |\n| **Narration** |  Modern applications are turning to the open source publish/subscribe facility Apache Kafka to distribute information as it occurs by publishing event on topics. Publish/subscribe capabilities are certainly not new and messaging products have provided this pattern for decades. However, Apache Kafka has risen to popularity due to its out of the box ability to retain an event history, which makes it well suited to certain application patterns. IBM Cloud Pak for Integration provides both messaging (IBM MQ) and also a production strength implementation of Apache Kafka (IBM Event Streams). IBM Event Streams provides a Kubernetes operator that enables rapid deployment of Apache Kafka clusters, including a graphical user interface that simplifies familiarisation. |\n| **Action** &nbsp; 5.1.1 | Show the **IBM Event Streams** tab in the browser. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-5-1-1.png\" width=\"800\" /> |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>6 - Viewing events on Kafka topic </summary>\n\n<br/>\n\n| **6.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | It turns out our flight information system is already configured to publish events to a Kafka topic when we delay a flight.  |\n| **Action** &nbsp; 6.1.1 | Navigate to **Topics** (1). Click **flight-delays** (2).<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-6-1-1.png\" width=\"800\" /> |\n| **Action** &nbsp; 6.1.2 | The events already emitted will be displayed. Select the top event (1) and show this corresponds to the flight you previously delayed (2). <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-6-1-2.png\" width=\"800\" /> |\n| **Action** &nbsp; 6.1.3 | Show that as you delay additional flights these show in the event stream. |\n| **Narration** | Note that the events for each delay we create are present in the event history, and there is a very clear representation of their sequential order based on the “Offset” value. These will remain here, regardless of whether subscribers read them or not, and this is one of the key differences between Apache Kafka and messaging capabilities such as IBM MQ. Events can only be removed administratively, either by archiving those older than a certain time period, or a more sophisticated mechanism known as “log compaction” which is useful when at least one event for each data record must be preserved. |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>7 - Connecting an application to the Kafka Cluster </summary>\n\n<br/>\n\n| **7.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | Applications consuming events from a Kafka cluster need to know the location of the bootstrap Kafka broker for initiation of their connection. You will notice that by default that IBM Event Streams only provides “internal” connections. That means you can only connect from within the OpenShift cluster. This connection can be used for example by the flight information system to publish events. However, our consumers (the Flight Information Board and later, the airline mobile application) will be beyond the OpenShift cluster. We can do basic external exposure by configuring an “external” listener but this provides only limited control when we are exposing Kafka to consumers beyond our immediate sphere. We are going to look at a much more powerful way of exposing a topic, using IBM Event Endpoint Manager. Since this is in the same OpenShift cluster as this Kafka cluster, the internal listener will be sufficient as IBM Event Endpoint Manager will do the external exposure for us, then route to the internal connection. |\n| **Action** &nbsp; 7.1.1 | Click **Connect to this topic** (1). Click **flight-delays** (2).<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-7-1-1.png\" width=\"800\" /> |\n| **Action** &nbsp; 7.1.2 | Click **Internal** (1), then copy the **endpoint information** (2). We will use this later when configuring IBM Event Endpoint Manager. Note that we do not need to download any certificates because the demo Kafka cluster has security switched off for simplicity.  <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-7-1-2.png\" width=\"800\" /> |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>8 - Managing the Async API </summary>\n\n<br/>\n\n| **8.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | IBM Event Endpoint Manager performs exactly the same role for asynchronous interfaces as IBM API Connect does for synchronous APIs. It allows us for example to make a selection of Kafka topics available in a catalogue and display them in a portal such that a developer can easily discover and subscribe to use them. It then protects the actual Kafka cluster by controlling access to it via a gateway.  Let’s add our Kafka topic to the IBM Event Endpoint Manager catalogue.  |\n| **Action** &nbsp; 8.1.1 | Open the Cloud Pak for Integration Platform Navigator tab and click **Design APIs**.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-8-1-1.png\" width=\"800\" /> |\n| **Action** &nbsp; 8.1.2 | Click **Develop APIs and products**.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-8-1-2.png\" width=\"800\" /> |\n| **Action** &nbsp; 8.1.3 | Select **Add** (1) in the top right, and select **AsyncAPI (from Kafka topic) (2).** <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-8-1-3.png\" width=\"800\" /> |\n| **Action** &nbsp; 8.1.4 | Enter **Flight Delays** in the Title field.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-8-1-4.png\" width=\"800\" /> |\n| **Narration** | IBM Event Endpoint Management can provide access to topics on multiple Kafka clusters via a single “event gateway”. Consumers therefore only have to connect to one bootstrap server (the event gateway) with one set of credentials regardless of which Kafka cluster their topics reside on. <br/><br/>As we add the topic to the catalogue for external exposure, we also choose to provide a schema for the event data. This ensures that all consumers of the events know what data model to expect from this topic. |\n| **Action** &nbsp; 8.1.5 | Enter the Kafka listener URL from the earlier step in the **Bootstrap Servers** field (1) in the Servers section. In the Channel field enter the topic name **flight-delays** (2). Upload the **Flight-Delay.avsc** (3) schema that can be downloaded from <a href=\"https://raw.githubusercontent.com/IBM/platinum-demo-code-eem/main/resources/Flight-Delays.avsc\" target=\"_blank\" rel=\"noreferrer\">here</a>. Click **Next** (4).<br/><br/>(If you wish, you can download this in advance.)<br/><br/>  <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-8-1-5.png\" width=\"800\" /> |\n| **Narration** | We will choose to publish the topic straight away, which will automatically create a Product and publish that within the Sandbox catalog. By default it will secure the topic in the same way we would a synchronous API, using an API Key and Secret. This enables us to hide what might be a more complex security model used on your Kafka cluster (such as mTLS).  Note that AsyncAPIs exposed by the event gateway are always protected with TLS communication, even if the underlying Kafka broker is not, as is the case in this demo. |\n| **Action** &nbsp; 8.1.6 | Check **Publish this API** (1) and click **Next** (2).<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-8-1-6.png\" width=\"800\" /> |\n| **Narration** | The next page shows the API key and secret that are needed to access the Async API from your Kafka consumer.  These will take the place of the username and password in your consumer properties. |\n| **Action** &nbsp; 8.1.7 | Click **Edit API** to continue.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-8-1-7.png\" width=\"800\" /> |\n| **Narration** | The next page is where you can enter a vast array of optional detail about the API, that will ultimately be published to the catalog. However, we do not need to add any further detail at this stage. |\n| **Action** &nbsp; 8.1.8 | The next screen is the Edit API screen, but you do not need to do anything here.  Simply ensure that the **online switch** is green, indicating the API is online. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-8-1-8.png\" width=\"800\" /> |\n| **Narration** | To manage granular access to topics would normally require a Kafka administrator to create and maintain multiple access control lists (ACLs). IBM Event Endpoint Manager enables consumers to self-administer their own access to topics. The Kafka administrator need only set up access between the Kafka cluster and the event gateway. From that point onward, the person deciding which topics the consumers can subscribe to no longer needs to be a Kafka specialist. |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>9 - Discovering the Async API from an app developer’s perspective </summary>\n\n<br/>\n\n| **9.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | Let’s get back to our airport scenario. There is a restaurant at the airport that is struggling to fill its tables. They have discovered that the first thing people do when their plane is badly delayed is to go find somewhere to eat, so they see this as an excellent opportunity to capture extra trade and draw those customers to their restaurant. They are prepared to invest in advertising, but it needs to be extremely timely if it’s going to capture this particular opportunity as people make decisions within seconds when they see their flight delayed. They need to get a notification to customers immediately, perhaps before the delay is even posted on the departure boards. They approach the main airline at the airport asking if they can place an advert on the mobile application alongside the delay notification, but they are only prepared to pay for an advert if it is delivered within a handful of seconds of the delay being published by the flight information system. <br/><br/>The developers of the airline app investigate the design of the current delay notification in their app. It uses an API to retrieve flight delays from the flight information system, but the API only polls once every five minutes, to avoid undue pressure on the back end database. They come to the Portal to see if there are alternative ways to find out about delays. They find the REST API for flight information that they’re currently using. They then discover there is also an Async API for “Flight Delays” which would enable them to be immediately notified, so they explore how they could incorporate retrieving events from Kafka into their mobile application.  |\n| **Action** &nbsp; 9.1.1 | Go to the API Connect Developer Portal tab and click on **API Products**. Note that if you are already on the API Products page, you may need to refresh the browser page as you just added a new AsyncAPI product. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-9-1-1.png\" width=\"800\" /> |\n| **Action** &nbsp; 9.1.2 | Explain the two entries, as highlighted in the narration above. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-9-1-2.png\" width=\"800\" /> |\n| **Narration** | Note that APIs are gathered together into “Products”. You could gather multiple topics under one Product, and they could even originate from different Kafka clusters. Access is then defined at the Product level, so you can easily subscribe to a whole suite of events or APIs in one go. Simple products are automatically created for development purposes and that’s what we will use in this demonstration. |\n| **Action** &nbsp; 9.1.3 | Click **Flight Delays auto product** (the automatically-generated product we created earlier).<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-9-1-3.png\" width=\"800\" /> |\n| **Action** &nbsp; 9.1.4 | Click **Flight Delays**.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-9-1-4.png\" width=\"800\" /> |\n| **Narration** | This next page will show documentation we provided when we added this API to the catalogue to help the consumer decide if this topic provides what they need. From this page you will find the values needed for connectivity. Note that the bootstrap server is that of the event gateway, not that of the original Kafka cluster. You will also find some example code samples to simplify application development. |\n| **Action** &nbsp; 9.1.5 | Explain the screen, as highlighted in the narration above.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-9-1-5.png\" width=\"800\" /> |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>10 - Subscribing to the Async API  </summary>\n\n<br/>\n\n| **10.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | From the detail we’ve found so far on the API, it looks ideal for providing the notifications for our restaurant mobile app, so we decide to collate the connection details and subscribe to the Async API. Just to reinforce what’s happening here – these are the connection details to the event gateway provided by IBM Event Endpoint Management, not to the actual underlying Kafka cluster. However, the event gateway “looks” just like a Kafka cluster to the consuming application. |\n| **Action** &nbsp; 10.1.1 | Click the arrow next to flight delays in the overview on the left, then select **Subscribe (operation)**. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-1.png\" width=\"800\" /> |\n| **Action** &nbsp; 10.1.2 | Scroll down on the right hand side to the **Properties** section (1) and obtain the value for **client.id** and **bootstrap.servers** (2). <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-2.png\" width=\"800\" /> |\n| **Action** &nbsp; 10.1.3 | Click **Get Access** in the top left. If for any reason you are not logged into the Portal, this is the point at which you will be forced to log in.  <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-3.png\" width=\"800\" /> |\n| **Narration** | Products are made available to subscribers through “Plans”. This gives us the opportunity to have different policies depending on the plan that is chosen. If APIs are monetized APIs, each plan might have a different cost, or some plans might only available to selected user groups. |\n| **Action** &nbsp; 10.1.4 | Select the **Default** pricing plan to continue. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-4.png\" width=\"800\" /> |\n| **Narration** | As a developer, you may be writing several applications, each using different APIs. From a security perspective you might not want all applications you work with to have access to all of the APIs that you have subscribed to. For this reason, you can create an “Application” within IBM Event Endpoint Manager for each of your applications, and individually subscribe them only to the Plans on the Products they need. Each application will get its own unique Key and Secret such that it can be identified when attempting to access the APIs.<br/><br/>At this point you will need to create an ‘Application’ in the portal. This is simply an identity or set of credentials that your actual application will use. |\n| **Action** &nbsp; 10.1.5 | Click **Create Application** on the right.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-5.png\" width=\"800\" /> |\n| **Action** &nbsp; 10.1.6 | Name the **title** **Airline App** (1) and click **Save** (2). <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-6.png\" width=\"800\" /> |\n| **Action** &nbsp; 10.1.7 | You will now see a dialog showing the **Key** and **Secret** for this application to access the API. <br/><br/><InlineNotification><strong>NOTE</strong>: It is very important that you save these, as they cannot be retrieved later. </InlineNotification><br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-7.png\" width=\"800\" /> |\n| **Action** &nbsp; 10.1.8 | Close this dialog then select your newly created application on the left. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-8.png\" width=\"800\" /> |\n| **Action** &nbsp; 10.1.9 | Review the details then click **Next**. Your subscription will be complete. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-9.png\" width=\"800\" /> |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>11 - Consuming the events </summary>\n\n<br/>\n\n| **11.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | We now have all the credentials we need for our Airline App to subscribe to the Kafka topic via IBM Event Endpoint Manager’s gateway. All we need now is an application to consume the events. We’re not going to create the actual airline mobile app, we’re just going to give you an example, built using the sample code from the Portal, for what the server side of the mobile application would be doing in order to pick up the events. <br/><br/>Recall that the IBM Event Endpoint Manager gateway always enforces TLS encryption on external requests, so our consumer will need to have a copy of the gateway’s public TLS certificate. We will download this certificate and store it somewhere that the consuming application can retrieve at runtime. |\n| **Action** &nbsp; 11.1.1 | Install the server certificate from the event gateway endpoint ready for the client application. There is a script to do this:<br/><br/><code>./install-certificate.sh</code><br/><br/><img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-11-1-1.png\" width=\"800\" /> |\n| **Narration** | The example in our demo is simply a java consumer that simulates the way the Airline App would receive Kafka events, such that we can see them arriving in real time. |\n| **Action** &nbsp; 11.1.2 |  The script that runs the consumer code itself is called ./setup-client-app.sh and is one of the files you downloaded in the beginning. This takes five arguments: <br/><br/> 1) **Target Namespace:** this is normally cp4i <br/><br/>2) **Kafka Client Id:** this is retrieved from the Developer Portal in the properties section<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-11-1-2-clientid.png\" width=\"800\" /> <br/>3) **Gateway Username:** this is the API Key that you copied in this step.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-11-1-2-apikey.png\" width=\"800\" /> <br/>4) **Gateway Password:** this is the API secret also shown in the screenshot above.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-11-1-2-apisecret.png\" width=\"800\" /><br/><br/>5) **Flight Number:** this is the flight number you want to monitor. This needs to be within quotes, e.g. \"EZY 6005\" |\n| **Action** &nbsp; 11.1.3 | Here is an example, that needs to be customized with your configuration: <br/><br/>./setup-client-app.sh cp4i 64a66394-84dd-4b8b-b78c-202e24125632 8515b170f10b6937c4ba89f1c6eaf325 746f7e1f89415723d00366acd0574410 \"EZY 6005\" <br/><br/>This will automatically build a container and run it on Red Hat OpenShift. |\n| **Action** &nbsp; 11.1.4 | In the Flight Information Manager, click the button to delay the flight you entered in the consumer app. Enter **180** minutes (1), then click **OK** (2). <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-11-1-4.png\" width=\"800\" /> <br/> |\n| **Action** &nbsp; 11.1.5 | Now return to the terminal window where the script was run, and you will see a message.  <br/><br/>\"Your flight EZY 6005 has been delayed by 180 minutes. You can eat at ACME Restaurant and get a 10% discount! Would you like to book a table before the others on your plane take them all?\" |\n| **Narration** | We see the following message, which of course in real life would appear on the airline mobile app alongside the delay notification.<br/><br/>\"Your flight EZY 6005 has been delayed by 180 minutes. You can eat at ACME Restaurant and get a 10% discount! Would you like to book a table before the others on your plane take them all?\"<br/><br/>Notice that it takes a while before the flight board shows the delay, since it is still using API polling to get flight information. <br/><br/><img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-11-1-5.png\" width=\"800\" /><br/> |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>Summary</summary>\n\n<br/>\n\nIn the demo we saw an example of a use case that was better served by listening to Kafka events than by polling synchronous APIs. We were able to react instantly to an event happening rather than wait a full polling interval. Furthermore, we did that without putting any additional load on the back-end system, as the Kafka stream provided full decoupling and is completely independent of the flight delay information. It is becoming clear that the most powerful way of exposing a back end’s capabilities is with both APIs and events. Even a single consumer is likely to need to retrieve data in different styles for different scenarios.\n\n<br/>\n\nHowever, the real purpose of the demo was to show how events could be shared, and governed in the same way as APIs, extending API management into event endpoint management. The topics were discoverable in a catalogue from which the consumer could self-subscribe to receive events. Access to the events was then securely exposed using IBM's unique event gateway that transparently routes the Kafka protocol to the underlying Kafka brokers.\n\n<br/>\n\nThank you for attending today’s presentation.\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n","type":"Mdx","contentDigest":"c17427ecb8764ff77162309db82378f9","owner":"gatsby-plugin-mdx","counter":2878},"frontmatter":{"title":"Event endpoint management 300-level live demo","description":"Event endpoint management","tabs":["Demo preparation","Demo script"]},"exports":{},"rawBody":"---\ntitle: Event endpoint management\n  300-level live demo\ndescription: Event endpoint management\ntabs: [ 'Demo preparation', 'Demo script']\n---\n\nexport const Title = () => (\n  <span>\n    Event endpoint management <br /> 300-level live demo\n  </span> );\n\n![banner](./images/300-eem-script-GitHub-banner-8-3-21-short.jpg)\n<span id=\"place1\"></span>\n\n<details>\n\n<summary>Introduction</summary>\n\n<br/>\n\nIn this demo we’ll explore how the data from an airports flight information system gets distributed to various other systems. These will include a Flight Information Board, and a mobile application for an airline. The Flight Information Board gets flight information using a traditional API. We will show how a new event stream for flight information on can be easily made available to the developers of the airline mobile application. This will enable the mobile app to receive flight delays the moment they occur, resulting in an improved and more marketable experience.\n\n<br/>\n\nWe will explore how we satisfy the requirements of a restaurant that wants to place time-sensitive advertisements on an airline's mobile application.\n\n<br/>\n\nLet’s get started!\n\n<br/>\n\n(Demo intro slides <a href=\"https://ibm.box.com/s/tph26q1zzqhix1t1fkm2ukyc9eqgwdbg\" target=\"_blank\" rel=\"noreferrer\">here</a>)\n\n<br/>\n\n(Printer-ready PDF of demo script <a href=\"./300-Integration-event-endpoint-management-Demo-Script.pdf\" target=\"_blank\" rel=\"noreferrer\">here</a>)\n\n<br/>\n\n</details>\n\n<details>\n\n<summary>1 - Exploring the Flight Information Manager UI</summary>\n\n<br/>\n\n| **1.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | Let’s first take a look at the flight information system itself so we understand the data we’re dealing with. The user interface for the flight information system is known as the Flight Information Manager. It shows us the current flights, and also provides us with a mechanism to add a delay to the anticipated departure time of a flight. |\n| **Action** &nbsp; 1.1.1 | Show the Flight Information Manager UI, as highlighted in the narration above. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-1-1-1.png\" width=\"800\" /> |\n| **Narration** | The Flight Information Manager uses a REST API available on the Flight Information Data Store. This API is only directly available to the Flight Information Manager user interface since it has the ability to perform sensitive functions, such as delaying the arrival time of a flight. |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>2 - Exploring the Flight Information REST API in the Portal </summary>\n\n<br/>\n\n| **2.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | There are other systems, such as the Flight Information Boards around the airport that also need access to flight data but do not need access to the whole API. For example, the Flight Information Board should not have access to the API function to “delay” a flight.  An API management capability (IBM API Connect) is used to expose selected data and functions from the API in a Developer Portal. The developers of other applications can browse the various APIs available at the airport, and self-subscribe to use them in their applications. This means that their usage of the API can be tracked, controlled (e.g. rate limited) and indeed revoked. Lets take a quick look at the exposed REST API for flight information. |\n| **Action** &nbsp; 2.1.1 | Go to the API management Portal and show the exposed REST API for flight information, noting that there is only a GET operation. |\n| **Action** &nbsp; 2.1.2 | Show the IBM API Connect Developer Portal tab in the browser. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-2-1-2.png\" width=\"800\" /> |\n| **Action** &nbsp; 2.1.3 | Click **API Products**. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-2-1-3.png\" width=\"800\" /> |\n| **Action** &nbsp; 2.1.4 | Click **Flight API**. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-2-1-4.png\" width=\"800\" /> |\n| **Action** &nbsp; 2.1.5 | Click **Flight API 1.0.0**. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-2-1-5.png\" width=\"800\" /> |\n| **Action** &nbsp; 2.1.6 | Click the **GET /flights** operation. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-2-1-6.png\" width=\"800\" /> |\n| **Narration** | Note that we’ve been able to explore this API right down to what operations are available, and even example data that would be returned. However, we cannot make calls on this API because we have not yet requested access to it. API Connect ensures only known consumers of the API can use it. |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>3 - Displaying the flight board </summary>\n\n<br/>\n\n| **3.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | The Flight Information Board is one of the consumers of this flight information API. It retrieves the data every 5 minutes to get the latest flight information. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |\n| **Action** &nbsp; 3.1.1 | Bring up the Flight Information Board UI.  <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-3-1-1.png\" width=\"800\" /> |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>4 - Exploring the update rate of the Flight Information Board  </summary>\n\n<br/>\n\n| **4.1** | **TBD** |\n| :--- | :--- |\n| **Narration** |  Note that if we delay a flight using the Flight Information Manager, although it shows the new time straight away in that user interface, the Flight Information Board only picks up the change when it next polls the API, several minutes later.   |\n| **Action** &nbsp; 4.1.1 | Show both the Flight Information Manager and the Flight Information Board on screen at the same time. Both screens are showing the same for now.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-4-1-1.png\" width=\"800\" /> |\n| **Action** &nbsp; 4.1.2 | Click on one of the **Delay this flight** (1) buttons, enter **60** (2) for the minutes to be delayed, and click **OK** (3).<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-4-1-2.png\" width=\"800\" /> |\n| **Action** &nbsp; 4.1.3 | Show that the flight departure time has been updated on the manager only.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-4-1-3.png\" width=\"800\" /> |\n| **Action** &nbsp; 4.1.4 | If required, wait 5 minutes to show that the Flight Board is updated. |\n| **Narration** |  Clearly, we could reduce the poll interval to something that might be more responsive, but as we reduce this interval, we are increasing the load on the Flight Information Data Store. Note that there could be many other systems also requiring this information in a timely fashion (eg., taxi companies, ground crew systems, airlines). If they were all to poll with short time intervals, the Flight Information Data Store would quickly become overwhelmed. The Flight Information Data Store could of course implement performance measures such as caching, but it would end up having to cater to constantly increasing demands of consumers, in terms of both performance, and availability. <br/><br/><InlineNotification><strong>Narration Tip</strong>: This is a good time to discuss how common this situation is across scenarios in other industries where APIs are a commonly used way to provide data, but do not make it easy to receive data changes in a timely way.</InlineNotification> |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>5 - Introducing Events, Kafka, and IBM Event Streams  </summary>\n\n<br/>\n\n| **5.1** | **TBD** |\n| :--- | :--- |\n| **Narration** |  Modern applications are turning to the open source publish/subscribe facility Apache Kafka to distribute information as it occurs by publishing event on topics. Publish/subscribe capabilities are certainly not new and messaging products have provided this pattern for decades. However, Apache Kafka has risen to popularity due to its out of the box ability to retain an event history, which makes it well suited to certain application patterns. IBM Cloud Pak for Integration provides both messaging (IBM MQ) and also a production strength implementation of Apache Kafka (IBM Event Streams). IBM Event Streams provides a Kubernetes operator that enables rapid deployment of Apache Kafka clusters, including a graphical user interface that simplifies familiarisation. |\n| **Action** &nbsp; 5.1.1 | Show the **IBM Event Streams** tab in the browser. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-5-1-1.png\" width=\"800\" /> |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>6 - Viewing events on Kafka topic </summary>\n\n<br/>\n\n| **6.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | It turns out our flight information system is already configured to publish events to a Kafka topic when we delay a flight.  |\n| **Action** &nbsp; 6.1.1 | Navigate to **Topics** (1). Click **flight-delays** (2).<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-6-1-1.png\" width=\"800\" /> |\n| **Action** &nbsp; 6.1.2 | The events already emitted will be displayed. Select the top event (1) and show this corresponds to the flight you previously delayed (2). <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-6-1-2.png\" width=\"800\" /> |\n| **Action** &nbsp; 6.1.3 | Show that as you delay additional flights these show in the event stream. |\n| **Narration** | Note that the events for each delay we create are present in the event history, and there is a very clear representation of their sequential order based on the “Offset” value. These will remain here, regardless of whether subscribers read them or not, and this is one of the key differences between Apache Kafka and messaging capabilities such as IBM MQ. Events can only be removed administratively, either by archiving those older than a certain time period, or a more sophisticated mechanism known as “log compaction” which is useful when at least one event for each data record must be preserved. |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>7 - Connecting an application to the Kafka Cluster </summary>\n\n<br/>\n\n| **7.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | Applications consuming events from a Kafka cluster need to know the location of the bootstrap Kafka broker for initiation of their connection. You will notice that by default that IBM Event Streams only provides “internal” connections. That means you can only connect from within the OpenShift cluster. This connection can be used for example by the flight information system to publish events. However, our consumers (the Flight Information Board and later, the airline mobile application) will be beyond the OpenShift cluster. We can do basic external exposure by configuring an “external” listener but this provides only limited control when we are exposing Kafka to consumers beyond our immediate sphere. We are going to look at a much more powerful way of exposing a topic, using IBM Event Endpoint Manager. Since this is in the same OpenShift cluster as this Kafka cluster, the internal listener will be sufficient as IBM Event Endpoint Manager will do the external exposure for us, then route to the internal connection. |\n| **Action** &nbsp; 7.1.1 | Click **Connect to this topic** (1). Click **flight-delays** (2).<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-7-1-1.png\" width=\"800\" /> |\n| **Action** &nbsp; 7.1.2 | Click **Internal** (1), then copy the **endpoint information** (2). We will use this later when configuring IBM Event Endpoint Manager. Note that we do not need to download any certificates because the demo Kafka cluster has security switched off for simplicity.  <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-7-1-2.png\" width=\"800\" /> |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>8 - Managing the Async API </summary>\n\n<br/>\n\n| **8.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | IBM Event Endpoint Manager performs exactly the same role for asynchronous interfaces as IBM API Connect does for synchronous APIs. It allows us for example to make a selection of Kafka topics available in a catalogue and display them in a portal such that a developer can easily discover and subscribe to use them. It then protects the actual Kafka cluster by controlling access to it via a gateway.  Let’s add our Kafka topic to the IBM Event Endpoint Manager catalogue.  |\n| **Action** &nbsp; 8.1.1 | Open the Cloud Pak for Integration Platform Navigator tab and click **Design APIs**.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-8-1-1.png\" width=\"800\" /> |\n| **Action** &nbsp; 8.1.2 | Click **Develop APIs and products**.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-8-1-2.png\" width=\"800\" /> |\n| **Action** &nbsp; 8.1.3 | Select **Add** (1) in the top right, and select **AsyncAPI (from Kafka topic) (2).** <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-8-1-3.png\" width=\"800\" /> |\n| **Action** &nbsp; 8.1.4 | Enter **Flight Delays** in the Title field.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-8-1-4.png\" width=\"800\" /> |\n| **Narration** | IBM Event Endpoint Management can provide access to topics on multiple Kafka clusters via a single “event gateway”. Consumers therefore only have to connect to one bootstrap server (the event gateway) with one set of credentials regardless of which Kafka cluster their topics reside on. <br/><br/>As we add the topic to the catalogue for external exposure, we also choose to provide a schema for the event data. This ensures that all consumers of the events know what data model to expect from this topic. |\n| **Action** &nbsp; 8.1.5 | Enter the Kafka listener URL from the earlier step in the **Bootstrap Servers** field (1) in the Servers section. In the Channel field enter the topic name **flight-delays** (2). Upload the **Flight-Delay.avsc** (3) schema that can be downloaded from <a href=\"https://raw.githubusercontent.com/IBM/platinum-demo-code-eem/main/resources/Flight-Delays.avsc\" target=\"_blank\" rel=\"noreferrer\">here</a>. Click **Next** (4).<br/><br/>(If you wish, you can download this in advance.)<br/><br/>  <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-8-1-5.png\" width=\"800\" /> |\n| **Narration** | We will choose to publish the topic straight away, which will automatically create a Product and publish that within the Sandbox catalog. By default it will secure the topic in the same way we would a synchronous API, using an API Key and Secret. This enables us to hide what might be a more complex security model used on your Kafka cluster (such as mTLS).  Note that AsyncAPIs exposed by the event gateway are always protected with TLS communication, even if the underlying Kafka broker is not, as is the case in this demo. |\n| **Action** &nbsp; 8.1.6 | Check **Publish this API** (1) and click **Next** (2).<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-8-1-6.png\" width=\"800\" /> |\n| **Narration** | The next page shows the API key and secret that are needed to access the Async API from your Kafka consumer.  These will take the place of the username and password in your consumer properties. |\n| **Action** &nbsp; 8.1.7 | Click **Edit API** to continue.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-8-1-7.png\" width=\"800\" /> |\n| **Narration** | The next page is where you can enter a vast array of optional detail about the API, that will ultimately be published to the catalog. However, we do not need to add any further detail at this stage. |\n| **Action** &nbsp; 8.1.8 | The next screen is the Edit API screen, but you do not need to do anything here.  Simply ensure that the **online switch** is green, indicating the API is online. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-8-1-8.png\" width=\"800\" /> |\n| **Narration** | To manage granular access to topics would normally require a Kafka administrator to create and maintain multiple access control lists (ACLs). IBM Event Endpoint Manager enables consumers to self-administer their own access to topics. The Kafka administrator need only set up access between the Kafka cluster and the event gateway. From that point onward, the person deciding which topics the consumers can subscribe to no longer needs to be a Kafka specialist. |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>9 - Discovering the Async API from an app developer’s perspective </summary>\n\n<br/>\n\n| **9.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | Let’s get back to our airport scenario. There is a restaurant at the airport that is struggling to fill its tables. They have discovered that the first thing people do when their plane is badly delayed is to go find somewhere to eat, so they see this as an excellent opportunity to capture extra trade and draw those customers to their restaurant. They are prepared to invest in advertising, but it needs to be extremely timely if it’s going to capture this particular opportunity as people make decisions within seconds when they see their flight delayed. They need to get a notification to customers immediately, perhaps before the delay is even posted on the departure boards. They approach the main airline at the airport asking if they can place an advert on the mobile application alongside the delay notification, but they are only prepared to pay for an advert if it is delivered within a handful of seconds of the delay being published by the flight information system. <br/><br/>The developers of the airline app investigate the design of the current delay notification in their app. It uses an API to retrieve flight delays from the flight information system, but the API only polls once every five minutes, to avoid undue pressure on the back end database. They come to the Portal to see if there are alternative ways to find out about delays. They find the REST API for flight information that they’re currently using. They then discover there is also an Async API for “Flight Delays” which would enable them to be immediately notified, so they explore how they could incorporate retrieving events from Kafka into their mobile application.  |\n| **Action** &nbsp; 9.1.1 | Go to the API Connect Developer Portal tab and click on **API Products**. Note that if you are already on the API Products page, you may need to refresh the browser page as you just added a new AsyncAPI product. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-9-1-1.png\" width=\"800\" /> |\n| **Action** &nbsp; 9.1.2 | Explain the two entries, as highlighted in the narration above. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-9-1-2.png\" width=\"800\" /> |\n| **Narration** | Note that APIs are gathered together into “Products”. You could gather multiple topics under one Product, and they could even originate from different Kafka clusters. Access is then defined at the Product level, so you can easily subscribe to a whole suite of events or APIs in one go. Simple products are automatically created for development purposes and that’s what we will use in this demonstration. |\n| **Action** &nbsp; 9.1.3 | Click **Flight Delays auto product** (the automatically-generated product we created earlier).<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-9-1-3.png\" width=\"800\" /> |\n| **Action** &nbsp; 9.1.4 | Click **Flight Delays**.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-9-1-4.png\" width=\"800\" /> |\n| **Narration** | This next page will show documentation we provided when we added this API to the catalogue to help the consumer decide if this topic provides what they need. From this page you will find the values needed for connectivity. Note that the bootstrap server is that of the event gateway, not that of the original Kafka cluster. You will also find some example code samples to simplify application development. |\n| **Action** &nbsp; 9.1.5 | Explain the screen, as highlighted in the narration above.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-9-1-5.png\" width=\"800\" /> |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>10 - Subscribing to the Async API  </summary>\n\n<br/>\n\n| **10.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | From the detail we’ve found so far on the API, it looks ideal for providing the notifications for our restaurant mobile app, so we decide to collate the connection details and subscribe to the Async API. Just to reinforce what’s happening here – these are the connection details to the event gateway provided by IBM Event Endpoint Management, not to the actual underlying Kafka cluster. However, the event gateway “looks” just like a Kafka cluster to the consuming application. |\n| **Action** &nbsp; 10.1.1 | Click the arrow next to flight delays in the overview on the left, then select **Subscribe (operation)**. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-1.png\" width=\"800\" /> |\n| **Action** &nbsp; 10.1.2 | Scroll down on the right hand side to the **Properties** section (1) and obtain the value for **client.id** and **bootstrap.servers** (2). <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-2.png\" width=\"800\" /> |\n| **Action** &nbsp; 10.1.3 | Click **Get Access** in the top left. If for any reason you are not logged into the Portal, this is the point at which you will be forced to log in.  <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-3.png\" width=\"800\" /> |\n| **Narration** | Products are made available to subscribers through “Plans”. This gives us the opportunity to have different policies depending on the plan that is chosen. If APIs are monetized APIs, each plan might have a different cost, or some plans might only available to selected user groups. |\n| **Action** &nbsp; 10.1.4 | Select the **Default** pricing plan to continue. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-4.png\" width=\"800\" /> |\n| **Narration** | As a developer, you may be writing several applications, each using different APIs. From a security perspective you might not want all applications you work with to have access to all of the APIs that you have subscribed to. For this reason, you can create an “Application” within IBM Event Endpoint Manager for each of your applications, and individually subscribe them only to the Plans on the Products they need. Each application will get its own unique Key and Secret such that it can be identified when attempting to access the APIs.<br/><br/>At this point you will need to create an ‘Application’ in the portal. This is simply an identity or set of credentials that your actual application will use. |\n| **Action** &nbsp; 10.1.5 | Click **Create Application** on the right.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-5.png\" width=\"800\" /> |\n| **Action** &nbsp; 10.1.6 | Name the **title** **Airline App** (1) and click **Save** (2). <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-6.png\" width=\"800\" /> |\n| **Action** &nbsp; 10.1.7 | You will now see a dialog showing the **Key** and **Secret** for this application to access the API. <br/><br/><InlineNotification><strong>NOTE</strong>: It is very important that you save these, as they cannot be retrieved later. </InlineNotification><br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-7.png\" width=\"800\" /> |\n| **Action** &nbsp; 10.1.8 | Close this dialog then select your newly created application on the left. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-8.png\" width=\"800\" /> |\n| **Action** &nbsp; 10.1.9 | Review the details then click **Next**. Your subscription will be complete. <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-10-1-9.png\" width=\"800\" /> |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>11 - Consuming the events </summary>\n\n<br/>\n\n| **11.1** | **TBD** |\n| :--- | :--- |\n| **Narration** | We now have all the credentials we need for our Airline App to subscribe to the Kafka topic via IBM Event Endpoint Manager’s gateway. All we need now is an application to consume the events. We’re not going to create the actual airline mobile app, we’re just going to give you an example, built using the sample code from the Portal, for what the server side of the mobile application would be doing in order to pick up the events. <br/><br/>Recall that the IBM Event Endpoint Manager gateway always enforces TLS encryption on external requests, so our consumer will need to have a copy of the gateway’s public TLS certificate. We will download this certificate and store it somewhere that the consuming application can retrieve at runtime. |\n| **Action** &nbsp; 11.1.1 | Install the server certificate from the event gateway endpoint ready for the client application. There is a script to do this:<br/><br/><code>./install-certificate.sh</code><br/><br/><img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-11-1-1.png\" width=\"800\" /> |\n| **Narration** | The example in our demo is simply a java consumer that simulates the way the Airline App would receive Kafka events, such that we can see them arriving in real time. |\n| **Action** &nbsp; 11.1.2 |  The script that runs the consumer code itself is called ./setup-client-app.sh and is one of the files you downloaded in the beginning. This takes five arguments: <br/><br/> 1) **Target Namespace:** this is normally cp4i <br/><br/>2) **Kafka Client Id:** this is retrieved from the Developer Portal in the properties section<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-11-1-2-clientid.png\" width=\"800\" /> <br/>3) **Gateway Username:** this is the API Key that you copied in this step.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-11-1-2-apikey.png\" width=\"800\" /> <br/>4) **Gateway Password:** this is the API secret also shown in the screenshot above.<br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-11-1-2-apisecret.png\" width=\"800\" /><br/><br/>5) **Flight Number:** this is the flight number you want to monitor. This needs to be within quotes, e.g. \"EZY 6005\" |\n| **Action** &nbsp; 11.1.3 | Here is an example, that needs to be customized with your configuration: <br/><br/>./setup-client-app.sh cp4i 64a66394-84dd-4b8b-b78c-202e24125632 8515b170f10b6937c4ba89f1c6eaf325 746f7e1f89415723d00366acd0574410 \"EZY 6005\" <br/><br/>This will automatically build a container and run it on Red Hat OpenShift. |\n| **Action** &nbsp; 11.1.4 | In the Flight Information Manager, click the button to delay the flight you entered in the consumer app. Enter **180** minutes (1), then click **OK** (2). <br/><br/> <img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-11-1-4.png\" width=\"800\" /> <br/> |\n| **Action** &nbsp; 11.1.5 | Now return to the terminal window where the script was run, and you will see a message.  <br/><br/>\"Your flight EZY 6005 has been delayed by 180 minutes. You can eat at ACME Restaurant and get a 10% discount! Would you like to book a table before the others on your plane take them all?\" |\n| **Narration** | We see the following message, which of course in real life would appear on the airline mobile app alongside the delay notification.<br/><br/>\"Your flight EZY 6005 has been delayed by 180 minutes. You can eat at ACME Restaurant and get a 10% discount! Would you like to book a table before the others on your plane take them all?\"<br/><br/>Notice that it takes a while before the flight board shows the delay, since it is still using API polling to get flight information. <br/><br/><img src=\"https://raw.githubusercontent.com/ibm-garage-tsa/platinum-demos/master/src/pages/300-integration-event-endpoint-management/images/300-eem-demo-11-1-5.png\" width=\"800\" /><br/> |\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n\n<details>\n\n<summary>Summary</summary>\n\n<br/>\n\nIn the demo we saw an example of a use case that was better served by listening to Kafka events than by polling synchronous APIs. We were able to react instantly to an event happening rather than wait a full polling interval. Furthermore, we did that without putting any additional load on the back-end system, as the Kafka stream provided full decoupling and is completely independent of the flight delay information. It is becoming clear that the most powerful way of exposing a back end’s capabilities is with both APIs and events. Even a single consumer is likely to need to retrieve data in different styles for different scenarios.\n\n<br/>\n\nHowever, the real purpose of the demo was to show how events could be shared, and governed in the same way as APIs, extending API management into event endpoint management. The topics were discoverable in a catalogue from which the consumer could self-subscribe to receive events. Access to the events was then securely exposed using IBM's unique event gateway that transparently routes the Kafka protocol to the underlying Kafka brokers.\n\n<br/>\n\nThank you for attending today’s presentation.\n\n<br/>\n\n**[Go to top](#place1)**\n\n</details>\n","fileAbsolutePath":"/home/runner/work/platinum-demos/platinum-demos/src/pages/300-integration-event-endpoint-management/demo-script.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}